PLAYTEST_ENABLED = DEBUG_ENABLED = !1;
BUILD_TIMESTAMP = 1465487168716;
FORCED_ORIENTATION = "landscape";
RENDERER = "auto";
var __extends = this && this.__extends || function(c, d) {
        function b() {
            this.constructor = c
        }
        for (var a in d) d.hasOwnProperty(a) && (c[a] = d[a]);
        c.prototype = null === d ? Object.create(d) : (b.prototype = d.prototype, new b)
    },
    util;
(function(c) {
    var d = function() {
        function b() {}
        b.determineAssetType = function() {
            if (null != Game.config.forcedAssetType && void 0 != Game.config.assetTypes[Game.config.forcedAssetType]) b.assetType = Game.config.forcedAssetType;
            else {
                var a;
                Game.game.device.desktop ? "portrait" == Game.orientation ? a = window.innerHeight : "landscape" == Game.orientation && (a = window.innerWidth) : "portrait" == Game.orientation ? a = document.documentElement.offsetHeight : "landscape" == Game.orientation && (a = document.documentElement.offsetWidth);
                Object.keys(Game.config.assetTypes).forEach(function(g) {
                    if (!b.assetType) {
                        var e =
                            Game.config.assetTypes[g];
                        if (e.minRes && e.maxRes) a > e.minRes && a <= e.maxRes && (b.assetType = g);
                        else if (e.minRes) a > e.minRes && (b.assetType = g);
                        else if (e.maxRes) a <= e.maxRes && (b.assetType = g);
                        else throw "Asset type " + g + " is missing a minRes and/or maxRes in config.json";
                    }
                });
                b.assetType || (b.assetType = Object.keys(Game.config.assetTypes)[0])
            }
            b.imageScale = Game.config.assetTypes[b.assetType].scale
        };
        b.setup = function() {
            c.Scale.determineAssetType();
            var a = this._getOrientationSettings();
            Game.game.scale.setMinMax(a.minResolution.width,
                a.minResolution.height);
            Game.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            Game.dimensions = c.Scale.getDimensions();
            Game.game.scale.setGameSize(Game.dimensions.width, Game.dimensions.height)
        };
        b.getGameRatio = function() {
            var a, g = this._getOrientationSettings();
            "portrait" == Game.orientation ? (a = window.innerHeight / window.innerWidth, a = Phaser.Math.clamp(a, 1 / g.minRatio, 1 / g.maxRatio)) : "landscape" == Game.orientation && (a = window.innerWidth / window.innerHeight, a = Phaser.Math.clamp(a, 1 / g.maxRatio, 1 / g.minRatio));
            return a
        };
        b.getDimensions = function() {
            var a, g = this._getOrientationSettings();
            "portrait" == Game.orientation ? (a = g.workingWidth * b.imageScale, a = new c.Dimensions(a, a * b.getGameRatio())) : "landscape" == Game.orientation && (g.workingHeight ? (a = g.workingHeight * b.imageScale, a = new c.Dimensions(a * b.getGameRatio(), a)) : (a = g.workingWidth * b.imageScale, a = new c.Dimensions(a, a / b.getGameRatio())));
            return a
        };
        b.getCanvasScale = function() {
            return parseInt(Game.game.canvas.style.width, 10) / Game.game.canvas.width
        };
        b._getOrientationSettings =
            function() {
                return Game.config.orientationSettings[Game.orientation]
            };
        b.assetType = null;
        b.imageScale = null;
        return b
    }();
    c.Scale = d
})(util || (util = {}));
(function(c) {
    var d = function() {
        function b(a, g) {
            this.width = a;
            this.height = g
        }
        b.prototype.set = function(a, g) {
            this.width = a;
            this.height = g
        };
        return b
    }();
    c.Dimensions = d
})(util || (util = {}));
var Game = function() {
    function c() {}
    c.init = function() {
        var d;
        d = "canvas" == RENDERER ? Phaser.CANVAS : "webgl" == RENDERER ? Phaser.WEBGL : null != navigator.userAgent.match(/(iPad)|(iPhone)|(iPod)/i) ? Phaser.CANVAS : Phaser.AUTO;
        c.game = new Phaser.Game(0, 0, d, "phaser-game", {
            preload: c.preload,
            create: c.create
        });
        for (var b in c._states) c.game.state.add(b, c._states[b])
    };
    c.preload = function() {
        c.game.load.json("images", "assets/data/images.json");
        c.game.load.json("config", "assets/data/config.json")
    };
    c.create = function() {
        c.config =
            c.game.cache.getJSON("config");
        c.orientation = c.config.forcedOrientation ? c.config.forcedOrientation : window.innerWidth > window.innerHeight ? "landscape" : "portrait";
        c.game.canvas.oncontextmenu = function(c) {
            c.preventDefault()
        };
        util.Scale.setup();
        c.game.debug && c.game.debug.sprite && (c.game.debug.bmd = null, c.game.debug.sprite.destroy(), c.game.debug.sprite = null, c.game.debug.context = null, c.game.debug.canvas = null, c.game.debug.boot());
        c.game.time.advancedTiming = !0;
        c.game.stage.disableVisibilityChange = !0;
        window.onfocus =
            null;
        window.onblur = null;
        c.analytics = new util.Analytics(c.config.googleAnalyticsKey, c.config.flurryKey);
        c.analytics.pageview("GameInit");
        c.analytics.event("VersionInfo", "BuildTimestamp", BUILD_TIMESTAMP);
        c.analytics.event("VersionInfo", "BuildDate", util.TimeFormatter.unixToFullDate(BUILD_TIMESTAMP));
        c.save = new util.Save;
        c.test = new util.Test;
        c.effects = new util.Effects;
        c.events = new util.Events;
        c.playTest = new util.PlayTest(c.config.playtestKey);
        util.Debug.logScalingInfo();
        util.PokiAds.init();
        util.PokiGameScore.init();
        c.game.state.start("BrandingState")
    };
    c.addState = function(d, b) {
        c._states[d] = b
    };
    c.scale = function(c) {
        void 0 == util.Scale.imageScale && util.Debug.error("You cannot use Game.scale before util.Scale.setup() is ran");
        return util.Scale.imageScale * c
    };
    c.unScale = function(c) {
        void 0 == util.Scale.imageScale && util.Debug.error("You cannot use Game.scale before util.Scale.setup() is ran");
        return c / util.Scale.imageScale
    };
    c.screenScale = function(c) {
        void 0 == util.Scale.imageScale && util.Debug.error("You cannot use Game.screenScale before util.Scale.setup() is ran");
        return Math.round(util.Scale.imageScale * c * util.Scale.getCanvasScale())
    };
    c.makeScreenshot = function(d) {
        if ("canvas" == c.renderer) d(c.game.canvas.toDataURL());
        else c.state.onRender(function() {
            d(c.game.canvas.toDataURL())
        }, !0)
    };
    c.openUrl = function(d) {
        // c.game.device.iOS ? window.location.href = d : window.open(d)
    };
    Object.defineProperty(c, "state", {
        get: function() {
            var d = c.game.state.getCurrentState();
            d instanceof states.BaseState || console.error("All states should extend the BaseState and implement IState!", d);
            return d
        },
        enumerable: !0,
        configurable: !0
    });
    Object.defineProperty(c, "renderer", {
        get: function() {
            return c.game.renderer instanceof PIXI.CanvasRenderer ? "canvas" : "webgl"
        },
        enumerable: !0,
        configurable: !0
    });
    c._states = {};
    return c
}();
"loading" != document.readyState ? bootstrap() : document.addEventListener("DOMContentLoaded", bootstrap);

function bootstrap() {
    function c() {
        0 == window.innerWidth || 0 == window.innerHeight ? window.setTimeout(c, 500) : a || (a = !0, Game.init())
    }
    var d = null != navigator.userAgent.match(/(iPad)|(iPhone)|(iPod)|(android)|(webOS)/i),
        b = !1,
        a = !1;
    if (null == FORCED_ORIENTATION || DEBUG_ENABLED || !d) b || (b = !0, c());
    else {
        var d = function() {
                (window.innerWidth > window.innerHeight ? "landscape" : "portrait") == FORCED_ORIENTATION ? (g.style.display = "none", b || (b = !0, c())) : g.style.display = "block"
            },
            g = document.createElement("div");
        g.style.cssText = "position:absolute;left:0;top:0;right:0;bottom:0;background:#fff;text-align:center";
        g.style.display = "none";
        document.body.appendChild(g);
        var e = document.createElement("div");
        e.style.cssText = "display:inline-block;height:100%;vertical-align:middle;";
        g.appendChild(e);
        e = document.createElement("img");
        e.src = "assets/static/orientation-" + FORCED_ORIENTATION + ".png";
        e.style.cssText = "max-width: 50%;max-height:50%;vertical-align:middle;";
        g.appendChild(e);
        d();
        window.addEventListener("resize", d, !1);
        window.addEventListener("focus", d, !1)
    }
}
var states;
(function(c) {
    var d = function(b) {
        function a() {
            b.apply(this, arguments);
            this._updateCallbacks = [];
            this._renderCallbacks = [];
            this._stepLimitedCallbacks = []
        }
        __extends(a, b);
        a.prototype.onUpdate = function(a, b) {
            void 0 === b && (b = !1);
            this._updateCallbacks.push({
                callback: a,
                runOnce: b
            })
        };
        a.prototype.onRender = function(a, b) {
            void 0 === b && (b = !1);
            this._renderCallbacks.push({
                callback: a,
                runOnce: b
            })
        };
        a.prototype.removeOnUpdate = function(a) {
            var b = this;
            this._updateCallbacks.forEach(function(f, c) {
                null != f && f.callback == a && (b._updateCallbacks[c] =
                    null)
            })
        };
        a.prototype.removeOnRender = function(a) {
            var b = this;
            this._renderCallbacks.forEach(function(f, c) {
                null != f && f.callback == a && (b._renderCallbacks[c] = null)
            })
        };
        a.prototype.update = function() {
            var a = this;
            b.prototype.update.call(this);
            util.Debug.calcAvgFPS();
            this._updateCallbacks.forEach(function(b, f) {
                null != b && (b.callback(), b.runOnce && a._updateCallbacks.splice(f))
            });
            null != Game.config.trackFPS && Game.config.trackFPS && this._runOncePerNSteps("TrackFPS", 500, function() {
                util.Debug.trackFPS()
            })
        };
        a.prototype.render =
            function() {
                var a = this;
                b.prototype.update.call(this);
                util.Debug.renderFPS();
                this._renderCallbacks.forEach(function(b, f) {
                    null != b && (b.callback(), b.runOnce && a._renderCallbacks.splice(f))
                })
            };
        a.prototype._setupLayers = function() {
            this.farBackLayer = Game.game.add.group();
            this.backLayer = Game.game.add.group();
            this.midLayer = Game.game.add.group();
            this.frontLayer = Game.game.add.group();
            this.uiLayer = Game.game.add.group();
            this.fixedUiLayer = Game.game.add.group();
            this.fixedUiLayer.fixedToCamera = !0
        };
        a.prototype._resetCameraAndBounds =
            function() {
                var a = Game.game.camera.width,
                    b = Game.game.camera.height;
                Game.game.world.bounds.setTo(0, 0, a, b);
                Game.game.camera.bounds && Game.game.camera.bounds.setTo(0, 0, a, b)
            };
        a.prototype._setBounds = function(a) {
            Game.game.world.setBounds(a.x, a.y, a.width, a.height);
            Game.game.camera.bounds.setTo(a.x, a.y, a.width, a.height)
        };
        a.prototype._runOncePerNSteps = function(a, b, f) {
            this._stepLimitedCallbacks[a] ? (a = this._stepLimitedCallbacks[a], 0 == a.currentSteps ? (f(), a.currentSteps = a.totalSteps) : a.currentSteps--) : this._stepLimitedCallbacks[a] = {
                totalSteps: b,
                currentSteps: b,
                callback: f
            }
        };
        a.prototype._fadeOut = function(a) {
            var b = util.Sprite.createSprite(Game.dimensions.width, Game.dimensions.height, {
                r: 0,
                g: 0,
                b: 0
            });
            b.alpha = 0;
            Game.game.add.existing(b);
            b = Game.game.add.tween(b).to({
                alpha: 1
            }, 500, Phaser.Easing.Cubic.Out, !0);
            void 0 != a && b.onComplete.add(a, this)
        };
        return a
    }(Phaser.State);
    c.BaseState = d
})(states || (states = {}));
(function(c) {
    var d = function(b) {
        function a() {
            b.apply(this, arguments)
        }
        __extends(a, b);
        a.prototype.preload = function() {
            var a = Game.game.cache.getJSON("images"),
                b;
            for (b in a[util.Scale.assetType].sheets) {
                var f = a[util.Scale.assetType].sheets[b],
                    c = f.split("/").splice(3).join("/");
                "preroll" == c && (Game.game.load.atlasJSONHash(c, f + ".png", f + ".json"), util.Cleaner.addToCacheCleanupQueue("JSON", c))
            }
        };
        a.prototype.create = function() {
            var a = this;
            Game.analytics.pageview("BrandingState");
            this._initBackground();
            this._initLogo();
            window.setTimeout(function() {
                a._fadeOut(function() {
                    Game.game.state.start("PreloadState")
                })
            }, 2E3)
        };
        a.prototype._initBackground = function() {
            Game.game.stage.backgroundColor = 3783402
        };
        a.prototype._initLogo = function() {
            var a = Game.game.add.sprite(Game.game.world.centerX, 0, "preroll", "poki-logo");
            a.y = -a.height;
            a.anchor.set(.5, .5);
            var b = Game.game.add.tween(a).to({
                y: Game.game.world.centerY
            }, 1E3, Phaser.Easing.Bounce.Out, !0);
            util.Cleaner.addToDestroyQueue(a);
            util.Cleaner.addToDestroyQueue(b)
        };
        a.prototype.destroy =
            function() {
                util.Cleaner.cleanupAll()
            };
        return a
    }(c.BaseState);
    c.BrandingState = d
})(states || (states = {}));
Game.addState("BrandingState", states.BrandingState);
(function(c) {
    var d = function() {
        function b(a, b) {
            this._flurryEnabled = this._gaEnabled = !1;
            DEBUG_ENABLED || "localhost" == window.location.hostname || (void 0 != a && "undefined" != typeof ga && (this._gaEnabled = !0, ga("create", a, "auto")), void 0 != b && "undefined" != typeof FlurryAgent && (this._flurryEnabled = !0, FlurryAgent.startSession(b)))
        }
        b.prototype.pageview = function(a) {
            this._gaEnabled && ga("send", "pageview", a);
            this._flurryEnabled && FlurryAgent.logEvent("Pageview - " + a)
        };
        b.prototype.event = function(a, b, e, f) {
            this._gaEnabled &&
                (f = "undefined" !== typeof f ? f ? Math.round(1 * f) : 0 : 0, ga("send", "event", a, b, e, f));
            this._flurryEnabled && FlurryAgent.logEvent(a + " - " + b + " - " + e, {
                value: f ? f.toString() : void 0
            })
        };
        return b
    }();
    c.Analytics = d
})(util || (util = {}));
(function(c) {
    var d = function() {
        function b() {}
        b.cleanupCache = function(a, b) {
            var e = "remove" + a;
            if (Phaser.Cache.prototype.hasOwnProperty(e)) Game.game.cache[e](b);
            else c.Debug.warn("Phaser.Cache doesn't have a method called " + e)
        };
        b.destroy = function(a) {
            "function" == typeof a.destroy && (a instanceof Phaser.Group && a.children.forEach(function(a) {
                b.destroy(a)
            }), a.destroy());
            a = null
        };
        b.addToDestroyQueue = function(a, g) {
            void 0 === g && (g = "all");
            void 0 == b._destroyQueues[g] && (b._destroyQueues[g] = []);
            b._destroyQueues[g].push(a)
        };
        b.addToCacheCleanupQueue = function(a, g, e) {
            void 0 === e && (e = "all");
            void 0 == b._cacheCleanupQueues[e] && (b._cacheCleanupQueues[e] = []);
            b._cacheCleanupQueues[e].push({
                type: a,
                key: g
            })
        };
        b.cleanupQueue = function(a) {
            Object.keys(b._destroyQueues).forEach(function(g) {
                g == a && (b._destroyQueues[g].forEach(function(a) {
                    b.destroy(a)
                }), delete b._destroyQueues[g])
            });
            Object.keys(b._cacheCleanupQueues).forEach(function(g) {
                g == a && (b._cacheCleanupQueues[g].forEach(function(a) {
                    b.cleanupCache(a.type, a.key)
                }), delete b._cacheCleanupQueues[g])
            })
        };
        b.cleanupAll = function() {
            Object.keys(b._destroyQueues).forEach(function(a) {
                void 0 != b._destroyQueues[a] && (b._destroyQueues[a].forEach(function(a) {
                    b.destroy(a)
                }), delete b._destroyQueues[a])
            });
            Object.keys(b._cacheCleanupQueues).forEach(function(a) {
                void 0 != b._cacheCleanupQueues[a] && (b._cacheCleanupQueues[a].forEach(function(a) {
                    b.cleanupCache(a.type, a.key)
                }), delete b._cacheCleanupQueues[a])
            })
        };
        b._destroyQueues = {};
        b._cacheCleanupQueues = {};
        return b
    }();
    c.Cleaner = d
})(util || (util = {}));
(function(c) {
    var d = function() {
        function b() {}
        b.RGBtoHEX = function(a) {
            function b(a) {
                a = Math.floor(a).toString(16);
                return 1 == a.length ? "0" + a : a
            }
            return "#" + b(a.r) + b(a.g) + b(a.b)
        };
        b.HSLtoHEX = function(a) {
            return b.RGBtoHEX(b.HSLtoRGB(a))
        };
        b.HEXtoRGB = function(a) {
            return Phaser.Color.hexToColor(a)
        };
        b.HSLtoRGB = function(a) {
            return Phaser.Color.HSLtoRGB(a.h, a.s, a.l)
        };
        b.HEXtoHSL = function(a) {
            a = Phaser.Color.hexToColor(a);
            return Phaser.Color.RGBtoHSL(a.r, a.g, a.b)
        };
        b.HEXtoINT = function(a) {
            return parseInt(a.replace("#", ""),
                16)
        };
        b.getRandomHex = function() {
            return function g(b) {
                return (b += [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "a", "b", "c", "d", "e", "f"][Math.floor(16 * Math.random())]) && 6 == b.length ? b : g(b)
            }("")
        };
        return b
    }();
    c.Color = d
})(util || (util = {}));
(function(c) {
    var d = function() {
        function b() {}
        b.createCookie = function(a, b, e) {
            void 0 === e && (e = 365);
            if (e) {
                var f = new Date;
                f.setTime(f.getTime() + 864E5 * e);
                e = "; expires=" + f.toGMTString()
            } else e = "";
            document.cookie = a + "=" + b + e + "; path=/"
        };
        b.readCookie = function(a) {
            a += "=";
            for (var b = document.cookie.split(";"), e = 0; e < b.length; e++) {
                for (var f = b[e];
                    " " == f.charAt(0);) f = f.substring(1, f.length);
                if (0 == f.indexOf(a)) return f.substring(a.length, f.length)
            }
            return null
        };
        b.eraseCookie = function(a) {
            b.createCookie(a, "", -1)
        };
        return b
    }();
    c.Cookie = d
})(util || (util = {}));
(function(c) {
    var d = function() {
        function b() {}
        b.calcAvgFPS = function() {
            if (null !== Game.game.time.fps) {
                100 < b._fps.length && b._fps.shift();
                b._fps.push(Game.game.time.fps);
                var a = 0,
                    g;
                for (g in b._fps) a += b._fps[g];
                b._avgFPS = Math.round(a / b._fps.length * 20) / 10 / 2
            }
        };
        b.renderFPS = function() {
            DEBUG_ENABLED && Game.game.debug.text("FPS: " + Game.game.time.fps + " (AVG: " + b._avgFPS + ")", 2, 14, "#00ff00")
        };
        b.trackFPS = function() {
            void 0 == b._fpsTrackedPerState[Game.state.key] ? b._fpsTrackedPerState[Game.state.key] = 0 : b._fpsTrackedPerState[Game.state.key]++;
            if ("GameState" == Game.state.key) {
                if (100 < b._fpsTrackedPerState[Game.state.key]) return
            } else if (10 < b._fpsTrackedPerState[Game.state.key]) return;
            Game.analytics.event("Performance", "FPS", Game.state.key, b._avgFPS)
        };
        b.logCreationTime = function() {
            Game.analytics.event("LoadTimes", "Creation", "Time", (Date.now() - b._creationStartTime) / 1E3);
            DEBUG_ENABLED && b.log("Game was created in " + (Date.now() - b._creationStartTime) / 1E3 + " seconds")
        };
        b.logScalingInfo = function() {
            Game.analytics.event("ScalingInfo", "Available dimensions",
                window.screen.availWidth + "x" + window.screen.availHeight);
            Game.analytics.event("ScalingInfo", "Screen dimensions", window.screen.width + "x" + window.screen.height);
            Game.analytics.event("ScalingInfo", "Game dimensions", Game.dimensions.width + "x" + Game.dimensions.height);
            Game.analytics.event("ScalingInfo", "Asset type", c.Scale.assetType);
            DEBUG_ENABLED && (b.log("Game orientation: " + Game.orientation), b.log("Screen available dimensions: " + window.screen.availWidth + "x" + window.screen.availHeight), b.log("Screen dimensions: " +
                window.screen.width + "x" + window.screen.height), b.log("Game dimensions: " + Game.dimensions.width + "x" + Game.dimensions.height), b.log("Game ratio: " + c.Scale.getGameRatio()), b.log("Asset type: " + c.Scale.assetType))
        };
        b.warn = function(a) {
            DEBUG_ENABLED && console.warn(a)
        };
        b.error = function(a) {
            DEBUG_ENABLED && console.error(a)
        };
        b.log = function() {
            for (var a = [], b = 0; b < arguments.length; b++) a[b - 0] = arguments[b];
            DEBUG_ENABLED && console.log.apply(console, a)
        };
        b.startTime = function(a) {
            DEBUG_ENABLED && (b._startTimes[a] = Date.now())
        };
        b.stopTime = function(a) {
            DEBUG_ENABLED && (b._times[a] || (b._times[a] = []), b._times[a].push(Date.now() - b._startTimes[a]))
        };
        b.getAverageTime = function(a) {
            if (DEBUG_ENABLED && b._times[a] && b._times[a].length) {
                var g = 0;
                b._times[a].forEach(function(a) {
                    g += a
                });
                return g / b._times[a].length
            }
            return 0
        };
        b.logAverageTimes = function() {
            DEBUG_ENABLED && Object.keys(b._times).forEach(function(a) {
                var g = b.getAverageTime(a) / 1E3;
                b.log(a + " - Average of: " + g + " seconds over " + b._times[a].length + " iterations with a total of " + g * b._times[a].length +
                    " seconds")
            })
        };
        b._fps = [];
        b._creationStartTime = Date.now();
        b._avgFPS = 0;
        b._startTimes = [];
        b._times = [];
        b._fpsTrackedPerState = {};
        return b
    }();
    c.Debug = d
})(util || (util = {}));
(function(c) {
    var d = function() {
        function b() {
            this._screenFlashSprite = null;
            this.cameraShakeOffset = new Phaser.Point(0, 0)
        }
        b.prototype.prepare = function() {
            this._prepareScreenFlash()
        };
        b.prototype._prepareScreenFlash = function() {
            this._screenFlashSprite = c.Sprite.createSprite(Game.dimensions.width, Game.dimensions.height, {
                r: 122,
                g: 122,
                b: 122
            });
            this._screenFlashSprite.fixedToCamera = !0;
            this._screenFlashSprite.alpha = 0;
            Game.game.add.existing(this._screenFlashSprite)
        };
        b.prototype.screenFlash = function(a, b, e) {
            void 0 ===
                b && (b = .8);
            void 0 === e && (e = 50);
            this._screenFlashSprite || this._prepareScreenFlash();
            Game.game.world.bringToTop(this._screenFlashSprite);
            this._screenFlashSprite.tint = a;
            Game.game.add.tween(this._screenFlashSprite).to({
                alpha: b
            }, e, Phaser.Easing.Linear.None, !0, 0, 0, !0).onComplete.add(function() {
                this._screenFlashSprite.alpha = 0
            }, this)
        };
        b.prototype.screenShake = function(a, b) {
            var e = this;
            void 0 === a && (a = 5);
            void 0 === b && (b = 20);
            if (!(0 < this._screenShakes)) {
                0 < b % 2 && b++;
                this._lastShakedAt = Game.game.time.now;
                this._screenShakes =
                    b;
                var f = function() {
                    if (0 < e._screenShakes) {
                        e._screenShakes--;
                        var b = Game.scale(.5 * e._screenShakes * a);
                        e._screenShakes % 2 ? (Game.game.camera.y += b, Game.game.camera.x += b, e.cameraShakeOffset.y = b, e.cameraShakeOffset.x = b) : (Game.game.camera.y -= b, Game.game.camera.x -= b, e.cameraShakeOffset.y = -b, e.cameraShakeOffset.x = -b);
                        0 == e._screenShakes && e.cameraShakeOffset.setTo(0, 0);
                        Game.game.camera.displayObject.position.y = -Game.game.camera.view.y;
                        Game.game.camera.displayObject.position.x = -Game.game.camera.view.x
                    } else Game.state.removeOnUpdate(f)
                };
                Game.state.onUpdate(f)
            }
        };
        b.prototype.reset = function() {
            this._screenShakes = this._lastShakedAt = null;
            this.cameraShakeOffset = new Phaser.Point(0, 0);
            this._screenFlashSprite = null
        };
        return b
    }();
    c.Effects = d
})(util || (util = {}));
(function(c) {
    var d = function() {
        function b() {
            this._callbacks = {}
        }
        b.prototype.addListener = function(a, b, e) {
            this._callbacks[a] || (this._callbacks[a] = []);
            this._callbacks[a].push({
                callback: b,
                context: e
            })
        };
        b.prototype.removeListener = function(a, b, e) {
            b = this._callbacks[a].indexOf({
                callback: b,
                context: e
            }); - 1 < b && (this._callbacks[a][b] = null)
        };
        b.prototype.trigger = function(a) {
            for (var b = [], e = 1; e < arguments.length; e++) b[e - 1] = arguments[e];
            this._callbacks[a] && this._callbacks[a].forEach(function(a) {
                a.callback.call(a.context,
                    b)
            })
        };
        b.prototype.clearByName = function(a) {
            this._callbacks[a] = []
        };
        b.prototype.clearAll = function() {
            this._callbacks = {}
        };
        return b
    }();
    c.Events = d
})(util || (util = {}));
(function(c) {
    var d = function() {
        function b(a) {
            this.enabled = !1;
            PLAYTEST_ENABLED && void 0 != a && (this._logger = new Playtest.Logger(a, ["error", "feedback", "screenshot"]), this.enabled = !0)
        }
        b.prototype.screenshot = function() {
            this.enabled && this._logger.fireEventData("screenshot")
        };
        b.prototype.feedback = function() {
            this.enabled && this._logger.fireEventData("feedback")
        };
        return b
    }();
    c.PlayTest = d
})(util || (util = {}));
(function(c) {
    var d = function() {
        function b() {
            this._queueResizeCallback = this._resizeQueue = this._sprites = null;
            this._margin = Game.scale(160);
            this._padding = new Phaser.Point(Game.scale(175), Game.scale(75));
            this._paddingBottom = Game.scale(440);
            this._adBoxRatio = 1.4211;
            this._text = ""
        }
        b.prototype.init = function(a, b, e) {
            var f = this;
            void 0 === b && (b = null);
            e && (this._text = e);
            c.PokiAds.isLoaded && (this._prepareAdWrapper(), c.PokiAds.setShowCallback(function() {
                var a = f._sprites.y;
                f._sprites.y = 2 * -Game.dimensions.height;
                f._sprites.visible = !0;
                Game.game.add.tween(f._sprites).to({
                    y: a
                }, 500, Phaser.Easing.Quadratic.Out, !0)
            }), c.PokiAds.setContinueCallback(function() {
                f.destroy();
                null != b && b()
            }), c.PokiAds.setProgressCallback(function(a) {
                f._drawProgress(a)
            }), c.PokiAds.requestAd(a))
        };
        b.prototype._prepareAdWrapper = function() {
            this._sprites = Game.game.add.group();
            this._sprites.fixedToCamera = !0;
            this._sprites.visible = !1;
            var a = c.Sprite.createSprite(Game.dimensions.width, Game.dimensions.height, {
                r: 255,
                g: 255,
                b: 255
            });
            a.alpha = .5;
            this._sprites.add(a);
            var b,
                e;
            Game.dimensions.height > Game.dimensions.width ? (this._adBoxOffsetX = this._margin, b = Game.dimensions.width - 2 * this._adBoxOffsetX, e = b / this._adBoxRatio, this._adBoxOffsetY = Game.dimensions.height - e) : (this._adBoxOffsetY = this._margin, e = Game.dimensions.height - 2 * this._adBoxOffsetY, b = e * this._adBoxRatio, this._adBoxOffsetX = Game.dimensions.width - b);
            var f = Game.game.add.sprite(0, Game.dimensions.height / 2, "ui", "ad-ui-left");
            f.anchor.set(1, .5);
            this._sprites.add(f);
            a = Game.game.add.tileSprite(Game.dimensions.width / 2, Game.dimensions.height /
                2, b - 2 * f.width, f.height, "ui", "ad-ui-center");
            a.anchor.set(.5, .5);
            this._sprites.add(a);
            f.x = a.left;
            f = Game.game.add.sprite(a.right, Game.dimensions.height / 2, "ui", "ad-ui-right");
            f.anchor.set(0, .5);
            this._sprites.add(f);
            this._videoBox = c.Sprite.createSprite(b - 2 * this._padding.x, e - this._padding.y - this._paddingBottom, {
                r: 0,
                g: 0,
                b: 0
            });
            this._videoBox.anchor.set(.5, 0);
            this._videoBox.x = Game.dimensions.width / 2;
            this._videoBox.y = a.y - a.height / 2 + this._padding.y;
            this._sprites.add(this._videoBox);
            this._progressBarBackground =
                Game.game.add.sprite(this._videoBox.x + this._videoBox.width / 2, this._videoBox.y + this._videoBox.height + Game.scale(40), "ui", "ad-ui-loader-background");
            this._progressBarBackground.anchor.set(1, 0);
            this._progressBarLeft = Game.game.add.sprite(this._progressBarBackground.x - this._progressBarBackground.width, this._progressBarBackground.y, "ui", "ad-ui-loader-left");
            this._progressBarCenter = Game.game.add.tileSprite(this._progressBarLeft.right, this._progressBarBackground.y, 1, this._progressBarLeft.height, "ui", "ad-ui-loader-center");
            this._progressBarRight = Game.game.add.sprite(this._progressBarCenter.right, this._progressBarBackground.y, "ui", "ad-ui-loader-right");
            this._sprites.addMultiple([this._progressBarBackground, this._progressBarLeft, this._progressBarCenter, this._progressBarRight]);
            b = Game.game.add.sprite(0, 0, "preroll", "logo");
            e = a.width - this._margin - this._progressBarBackground.width;
            f = Math.min((a.height - this._margin - this._videoBox.height) / b.height, e / b.width, 1);
            b.scale.set(f, f);
            b.anchor.set(.5, 0);
            b.x = a.left + .5 * e;
            b.y = this._progressBarCenter.y;
            this._sprites.add(b);
            c.PokiAds.wrapper.style.position = "absolute";
            c.PokiAds.wrapper.style.display = "none";
            this._onResize();
            this._queueResizeCallback = this._queueResize.bind(this);
            window.addEventListener("resize", this._queueResizeCallback, !1)
        };
        b.prototype._drawProgress = function(a) {
            this._progressBarCenter.width = a.percentageComplete / 100 * (this._progressBarBackground.width - 2 * this._progressBarLeft.width);
            this._progressBarRight.x = this._progressBarCenter.right
        };
        b.prototype._queueResize = function() {
            var a = this._onResize.bind(this);
            null != this._resizeQueue && clearTimeout(a);
            this._resizeQueue = setTimeout(function() {
                a();
                this._resizeQueue = null
            }, 100)
        };
        b.prototype._onResize = function() {
            var a = new c.Dimensions(c.Scale.getCanvasScale() * this._videoBox.width, c.Scale.getCanvasScale() * this._videoBox.height);
            c.PokiAds.wrapper.style.left = Game.dimensions.width / 2 * c.Scale.getCanvasScale() - a.width / 2 + Game.game.canvas.getBoundingClientRect().left + "px";
            c.PokiAds.wrapper.style.top = this._videoBox.y * c.Scale.getCanvasScale() + Game.game.canvas.getBoundingClientRect().top +
                "px";
            c.PokiAds.wrapper.style.width = a.width + "px";
            c.PokiAds.wrapper.style.height = a.height + "px";
            c.PokiAds.resize(a.width, a.height)
        };
        b.prototype.destroy = function() {
            c.Cleaner.destroy(this._sprites);
            window.removeEventListener("resize", this._queueResizeCallback, !1)
        };
        return b
    }();
    c.PokiAdUI = d
})(util || (util = {}));
(function(c) {
    var d = function() {
        function b() {}
        b.init = function() {
            "undefined" != typeof POKI_ADS && (b._prepareWrapper(), b._prepareEvents(), b.isInitialized = !0, b.width = Game.dimensions.width, b.height = Game.dimensions.height, POKI_ADS.init({
                debug: DEBUG_ENABLED,
                width: b.width,
                height: b.height,
                timeUpdateInterval: 100
            }), b.onReady(function(a) {
                Game.analytics.event("AdBlocker", "False", navigator.userAgent);
                b.isLoaded = !0
            }), b.onAdBlocked(function(a) {
                Game.analytics.event("AdBlocker", "True", navigator.userAgent)
            }))
        };
        b._prepareWrapper =
            function() {
                var a = document.createElement("div");
                a.setAttribute("id", "poki-ads-wrapper");
                a.style.display = "none";
                var g = document.createElement("div");
                g.setAttribute("id", "poki-sdk-container");
                a.appendChild(g);
                document.body.appendChild(a);
                b.wrapper = a
            };
        b._prepareEvents = function() {
            POKI_DISPATCHER.addEventListener(poki.ads.ready, function(a) {
                c.Debug.log("Poki ads ready");
                Game.analytics.event("Ad", "ready", Game.game.state.current);
                POKI_ADS.startAd();
                b.wrapper.style.display = "block";
                c.Sound.pauseAll();
                null != b._showCallback &&
                    b._showCallback()
            });
            POKI_DISPATCHER.addEventListener(poki.ads.error, function(a) {
                c.Debug.log("Poki ads error");
                Game.analytics.event("Ad", "error", Game.game.state.current);
                b.wrapper.style.display = "none";
                c.Sound.resumeAll();
                null != b._continueCallback && b._continueCallback()
            });
            POKI_DISPATCHER.addEventListener(poki.ads.limit, function(a) {
                c.Debug.log("Poki ads limit");
                Game.analytics.event("Ad", "limit", Game.game.state.current);
                b.wrapper.style.display = "none";
                c.Sound.resumeAll();
                null != b._continueCallback && b._continueCallback()
            });
            POKI_DISPATCHER.addEventListener(poki.ads.completed, function(a) {
                c.Debug.log("Poki ads completed");
                Game.analytics.event("Ad", "completed", Game.game.state.current);
                b.wrapper.style.display = "none";
                c.Sound.resumeAll();
                null != b._continueCallback && b._continueCallback()
            });
            POKI_DISPATCHER.addEventListener(poki.ads.update, function(a) {
                null != b._progressCallback && b._progressCallback(a)
            });
            POKI_DISPATCHER.addEventListener(poki.ads.impression, function(a) {
                c.Debug.log("Poki ads impression");
                Game.analytics.pageview("Ad");
                Game.analytics.event("Ad", "impression", Game.game.state.current)
            });
            POKI_DISPATCHER.addEventListener(poki.ads.requested, function(a) {
                c.Debug.log("Poki ads requested");
                Game.analytics.event("Ad", "requested", Game.game.state.current)
            });
            POKI_DISPATCHER.addEventListener(poki.ads.started, function(a) {
                c.Debug.log("Poki ads started");
                Game.analytics.event("Ad", "started", Game.game.state.current)
            });
            POKI_DISPATCHER.addEventListener(poki.ads.skipped, function(a) {
                c.Debug.log("Poki ads skipped");
                Game.analytics.event("Ad",
                    "skipped", Game.game.state.current)
            })
        };
        b.requestAd = function(a) {
            b.isInitialized ? b.wrapper ? POKI_ADS.requestAd({
                position: a
            }) : c.Debug.warn("No ad wrapper created") : c.Debug.warn("PokiAds needs to be initialized before running requestAd")
        };
        b.setShowCallback = function(a) {
            b._showCallback = a
        };
        b.setContinueCallback = function(a) {
            b._continueCallback = a
        };
        b.setProgressCallback = function(a) {
            b._progressCallback = a
        };
        b.resize = function(a, b) {
            POKI_ADS.resize(a, b)
        };
        b.onReady = function(a) {
            b.isInitialized ? POKI_DISPATCHER.addEventListener(poki.ready,
                a) : c.Debug.warn("PokiAds needs to be initialized before running onReady")
        };
        b.onAdBlocked = function(a) {
            b.isInitialized ? POKI_DISPATCHER.addEventListener(poki.adblocked, a) : c.Debug.warn("PokiAds needs to be initialized before running onAdBlocked")
        };
        b.isInitialized = !1;
        b.isLoaded = !1;
        return b
    }();
    c.PokiAds = d
})(util || (util = {}));
(function(c) {
    var d = function() {
        function b() {}
        b.init = function() {
            if ("undefined" != typeof POKI_GAME_SCORE) {
                var a = new POKI_GAME_SCORE(window.top);
                a.send(a.events.bridge);
                a.addEventListener(a.events.rating, function(a) {
                    Game.analytics.event("Performance", "Rating", Game.state.key, a.score)
                })
            }
        };
        return b
    }();
    c.PokiGameScore = d
})(util || (util = {}));
(function(c) {
    var d = function(b) {
        function a() {
            b.apply(this, arguments)
        }
        __extends(a, b);
        a.prototype.setGroup = function(a) {
            this._parentTransform = a
        };
        a.prototype.updateTransform = function() {
            this.visible && this.displayObjectUpdateTransform(this._parentTransform)
        };
        return a
    }(Phaser.Sprite);
    c.PositionGroupSprite = d
})(util || (util = {}));
(function(c) {
    var d = function() {
        function b() {}
        b.centerHorizontally = function(a, b, e) {
            void 0 === b && (b = 0);
            e = e || Game.game.world.bounds;
            var f = b * (a.length - 1);
            a.forEach(function(a) {
                f += a.width
            });
            var c = e.y + e.width / 2 - f / 2;
            a.forEach(function(a) {
                var e = a.anchor || (a instanceof Phaser.Group ? new Phaser.Point(.5, .5) : new Phaser.Point);
                a.x = c - a.width * -e.x;
                c += a.width + b
            })
        };
        b.centerVertically = function(a, b, e) {
            void 0 === b && (b = 0);
            e = e || Game.game.world.bounds;
            var f = b * (a.length - 1);
            a.forEach(function(a) {
                f += a.height
            });
            var c = e.y + e.height /
                2 - f / 2;
            a.forEach(function(a) {
                var e = a.anchor || (a instanceof Phaser.Group ? new Phaser.Point(.5, .5) : new Phaser.Point);
                a.y = c - a.height * -e.y;
                c += a.height + b
            })
        };
        return b
    }();
    c.PositionHelper = d
})(util || (util = {}));
(function(c) {
    var d = function() {
        function b() {
            this._data = {};
            this._localStorageSupported = void 0;
            var a;
            a = this.localStorageSupported() ? localStorage.getItem(Game.config.gameId) : c.Cookie.readCookie(Game.config.gameId);
            this._data = JSON.parse(a) || {};
            0 == Object.keys(this._data).length && (this._data.dateCreated = Date.now())
        }
        b.prototype.load = function(a) {
            return this._data[a]
        };
        b.prototype.save = function(a, b) {
            this._data[a] = b;
            this.doSave()
        };
        b.prototype.doSave = function() {
            this._data.dateModified = Date.now();
            this.localStorageSupported() ?
                localStorage.setItem(Game.config.gameId, JSON.stringify(this._data)) : c.Cookie.createCookie(Game.config.gameId, JSON.stringify(this._data))
        };
        b.prototype.clear = function(a) {
            "undefined" !== typeof this._data[a] && (delete this._data[a], this.doSave())
        };
        b.prototype.localStorageSupported = function() {
            var a = window.sessionStorage;
            if (void 0 === this._localStorageSupported) try {
                a.setItem("test", "1"), a.removeItem("test"), this._localStorageSupported = !0
            } catch (b) {
                this._localStorageSupported = !1
            }
            return this._localStorageSupported
        };
        return b
    }();
    c.Save = d
})(util || (util = {}));
(function(c) {
    var d = function() {
        function b() {}
        b.playFx = function(a, g) {
            void 0 === g && (g = !1);
            b.muted || b.soundMuted || (void 0 == b._sounds[a] && (b._sounds[a] = Game.game.add.audio(a, this._soundVolume, g)), b._sounds[a].play())
        };
        b.stopFx = function(a) {
            void 0 != b._sounds[a] && b._sounds[a].stop()
        };
        b.playMusic = function(a, g, e) {
            void 0 === g && (g = !0);
            void 0 === e && (e = null);
            void 0 == b._musics[a] && (b._musics[a] = Game.game.add.audio(a, this._musicVolume, g), g || null === e || b._musics[a].onStop.add(e));
            var f = b._musics[a];
            if (b.muted || b.musicMuted) {
                var c =
                    function() {
                        f.pause();
                        f.onPlay.remove(c)
                    };
                f.onPlay.add(c)
            }
            f.isPlaying || (this.pauseAllMusic(), f.play())
        };
        b.stopMusic = function(a) {
            void 0 != b._musics[a] && b._musics[a].stop()
        };
        b.setMusicVolume = function(a, g) {
            b._musics[a].volume = g
        };
        b.pauseMusic = function(a) {
            "undefined" !== typeof b._musics[a] && b._musics[a].pause()
        };
        b.pauseAllMusic = function() {
            for (var a in b._musics) b._musics[a].pause()
        };
        b.resumeMusic = function(a) {
            "undefined" !== typeof b._musics[a] && b._musics[a].resume()
        };
        b.pauseAll = function() {
            for (var a in b._sounds) b._sounds[a].pause();
            for (a in b._musics) b._musics[a].pause()
        };
        b.resumeAll = function() {
            for (var a in b._sounds) b._sounds[a].resume();
            for (a in b._musics) b._musics[a].resume()
        };
        b.resumeAllMusic = function() {
            for (var a in b._musics) b._musics[a].resume()
        };
        b.setAllMusicVolume = function(a) {
            for (var g in b._musics) b._musics[g].volume = a
        };
        b.setSoundVolume = function(a, g) {
            b._sounds[a].volume = g
        };
        b.pauseAllSound = function() {
            for (var a in b._sounds) b._sounds[a].pause()
        };
        b.setAllSoundVolume = function(a) {
            for (var g in b._sounds) b._sounds[g].volume =
                a
        };
        b.mute = function() {
            this.pauseAllMusic();
            this.pauseAllSound();
            b.muted = !0;
            Game.save.save("muted", !0)
        };
        b.muteSounds = function() {
            this.pauseAllSound();
            b.soundMuted = !0;
            Game.save.save("soundMuted", !0)
        };
        b.muteMusic = function() {
            this.pauseAllMusic();
            b.musicMuted = !0;
            Game.save.save("musicMuted", !0)
        };
        b.unMute = function() {
            b.muted = !1;
            Game.save.save("muted", !1)
        };
        b.unMuteSounds = function() {
            b.soundMuted = !1;
            Game.save.save("soundMuted", !1)
        };
        b.unMuteMusic = function() {
            this.resumeAllMusic();
            b.musicMuted = !1;
            Game.save.save("musicMuted", !1)
        };
        b.muted = !1;
        b.soundMuted = !1;
        b.musicMuted = !1;
        b._musics = {};
        b._sounds = {};
        b._soundVolume = 1;
        b._musicVolume = 1;
        return b
    }();
    c.Sound = d
})(util || (util = {}));
(function(c) {
    var d = function() {
        function b() {}
        b.createBitmapData = function(a, b, e) {
            void 0 === e && (e = void 0);
            a = Game.game.make.bitmapData(a, b);
            void 0 != e && a.fill(e.r, e.g, e.b);
            return a
        };
        b.createSprite = function(a, g, e) {
            void 0 === e && (e = void 0);
            a = b.createBitmapData(a, g, e);
            return new Phaser.Sprite(Game.game, 0, 0, a)
        };
        b.maskColor = function(a, b) {
            var e = c.Sprite.createBitmapData(a.width, a.height, b),
                f = Game.game.make.bitmapData(a.width, a.height);
            f.alphaMask(e, a);
            return f
        };
        return b
    }();
    c.Sprite = d
})(util || (util = {}));
(function(c) {
    var d = function() {
        function b() {
            this._testGroups = Game.save.load("testGroups") || {}
        }
        b.prototype.assignTestGroup = function(a, b) {
            void 0 === b && (b = 2);
            if (void 0 != this._testGroups[a]) c.Debug.log("Testgroup for '" + a + "': " + this._testGroups[a]), Game.analytics.event("TestGroup", a, this._testGroups[a]);
            else {
                var e = ["A", "B", "C"].slice(0, b),
                    f = Math.floor(Math.random() * e.length);
                this._testGroups[a] = e[f];
                Game.save.save("testGroups", this._testGroups);
                c.Debug.log("Testgroup for '" + a + "': " + e[f]);
                Game.analytics.event("TestGroup",
                    a, e[f])
            }
        };
        b.prototype.getTestGroup = function(a) {
            if (void 0 == this._testGroups[a]) c.Debug.error("No test group assigned yet for '" + a + "'");
            else return this._testGroups[a]
        };
        return b
    }();
    c.Test = d
})(util || (util = {}));
(function(c) {
    var d = function() {
        function b() {}
        b.unixToFullDate = function(a) {
            var b = new Date;
            b.setSeconds(a);
            a = b.getFullYear() + "";
            var e = ("0" + (b.getMonth() + 1)).substr(-2),
                f = ("0" + b.getDate()).substr(-2),
                c = ("0" + b.getHours()).substr(-2),
                d = ("0" + b.getMinutes()).substr(-2),
                b = ("0" + b.getSeconds()).substr(-2);
            return a + "-" + e + "-" + f + " " + c + ":" + d + ":" + b
        };
        return b
    }();
    c.TimeFormatter = d
})(util || (util = {}));
var character;
(function(c) {
    var d = function() {
        function b(a, b, e, f) {
            void 0 === a && (a = "messi");
            void 0 === b && (b = null);
            void 0 === e && (e = !1);
            void 0 === f && (f = Game.state.midLayer);
            this.isMoving = this.isLeft = this.grounded = !1;
            this.y = this.x = 0;
            this.stunTime = 400;
            this._playerScale = .5;
            this._isKicking = this._orientationIsLeft = !1;
            this._kickDelay = this._kickTime = 200;
            this._kickForce = Game.scale(2900);
            this._moveSpeed = Game.scale(1E3);
            this._jumpCounter = 0;
            this._jumpLimit = 2;
            this._ballKickDistance = Game.scale(270);
            this._headRelativePosition = new Phaser.Point(Game.scale(0),
                Game.scale(110));
            this._headAngle = 0;
            this._headScale = new Phaser.Point(1, 1);
            this._leftShoeRelativePosition = new Phaser.Point(Game.scale(65), Game.scale(260));
            this._leftShoeRelativeBasePosition = this._leftShoeRelativePosition.clone();
            this._leftShoeAngle = 0;
            this._leftShoeScale = new Phaser.Point(1, 1);
            this._rightShoeRelativePosition = new Phaser.Point(Game.scale(-45), Game.scale(260));
            this._rightShoeRelativeBasePosition = this._rightShoeRelativePosition.clone();
            this._rightShoeAngle = 0;
            this._rightShoeScale = new Phaser.Point(1,
                1);
            this._leftArmRelativePosition = new Phaser.Point(Game.scale(175), Game.scale(170));
            this._leftArmAngle = 0;
            this._leftArmScale = new Phaser.Point(1, 1);
            this._rightArmRelativePosition = new Phaser.Point(Game.scale(-195), Game.scale(170));
            this._rightArmAngle = 0;
            this._rightArmScale = new Phaser.Point(1, 1);
            this._followBall = !0;
            this._isRunning = !1;
            this._runSteps = 0;
            this._isJumping = this._isPunching = !1;
            this._playerPolyRaw = [.4, .75, .6, .75, .85, 1, .85, 1.25, .6, 1.5, .6, 2, .4, 2, .4, 1.5, .15, 1.25, .15, 1];
            this._playerPoly = [];
            this.isLeft =
                e;
            this._characterString = a;
            e = util.Sprite.createSprite(Game.scale(200), Game.scale(200), {
                r: 0,
                g: 0,
                b: 0
            });
            e.alpha = 0;
            this.body = Game.game.add.existing(e);
            this.body.anchor.set(.5, .5);
            this._leftArm = Game.game.add.sprite(0, 0, "character", a + "-hand-back", f);
            this._leftArm.anchor.set(.5, .5);
            this._leftShoe = Game.game.add.sprite(0, 0, "character", a + "-foot", f);
            this._leftShoe.anchor.set(.5, .5);
            this._head = Game.game.add.sprite(0, 0, "character", a + "-head", f);
            this._head.anchor.set(.5, .8);
            this._rightShoe = Game.game.add.sprite(0,
                0, "character", a + "-foot", f);
            this._rightShoe.anchor.set(.5, .5);
            this._rightArm = Game.game.add.sprite(0, 0, "character", a + "-hand-front", f);
            this._rightArm.anchor.set(.5, .5);
            Game.game.physics.p2.enable(this.body, !1);
            this.setPlayerScale();
            this.body.body.mass = 100;
            this.body.body.immovable = !1;
            this.body.body.fixedRotation = !0;
            this.body.body.damping = .5;
            null === b && (b = Game.game.physics.p2.createMaterial("playerMaterial"));
            this.body.body.setMaterial(b)
        }
        b.prototype.isCharacter = function(a) {
            return this._characterString ==
                a
        };
        b.prototype.changeCharacter = function(a) {
            this._characterString = a;
            this._leftArm.frameName = this._characterString + "-hand-back";
            this._rightArm.frameName = this._characterString + "-hand-front";
            this._leftShoe.frameName = this._characterString + "-foot";
            this._rightShoe.frameName = this._characterString + "-foot";
            this._head.frameName = this._characterString + "-head"
        };
        b.prototype.getBallKickDistance = function() {
            return this._ballKickDistance
        };
        b.prototype.cheer = function(a) {
            var b = this;
            this._followBall = !1;
            this.lookNatural();
            var e = this._leftArmRelativePosition.clone(),
                f = this._rightArmRelativePosition.clone();
            this._leftArmAngle = -90;
            this._rightArmAngle = 150;
            this._leftArmRelativePosition.set(e.x, e.y - Game.scale(100));
            this._rightArmRelativePosition.set(e.x - Game.scale(200), f.y - Game.scale(100));
            var c = setInterval(function() {
                b._isPunching || (Game.game.add.tween(b._leftArmRelativePosition).to({
                    x: e.x + Game.scale(40),
                    y: e.y - Game.scale(330)
                }, 350, Phaser.Easing.Quadratic.Out, !0, 0, 0, !0), Game.game.add.tween(b._rightArmRelativePosition).to({
                    x: f.x +
                        Game.scale(80),
                    y: f.y - Game.scale(330)
                }, 350, Phaser.Easing.Quadratic.Out, !0, 0, 0, !0), b.jump(Game.scale(500)))
            }, 800);
            setTimeout(function() {
                b._leftArmRelativePosition = e;
                b._rightArmRelativePosition = f;
                b._leftArmAngle = 0;
                b._rightArmAngle = 0;
                b._followBall = !0;
                clearInterval(c)
            }, a)
        };
        b.prototype.sad = function(a) {
            var b = this;
            this._followBall = !1;
            this.lookNatural();
            this._headAngle = 45;
            setTimeout(function() {
                b._headAngle = 0;
                b._followBall = !0
            }, a)
        };
        b.prototype.run = function() {
            this._isRunning = !0
        };
        b.prototype.idle = function() {
            var a =
                this;
            this._isRunning = !1;
            this._isKicking ? setTimeout(function() {
                a._rightShoeRelativePosition = a._rightShoeRelativeBasePosition.clone();
                a._leftShoeRelativePosition = a._leftShoeRelativeBasePosition.clone()
            }, this._kickTime) : (this._rightShoeRelativePosition = this._rightShoeRelativeBasePosition.clone(), this._leftShoeRelativePosition = this._leftShoeRelativeBasePosition.clone())
        };
        b.prototype.getKickVelocityIfWeKickBallAtPosition = function(a) {
            void 0 === a && (a = null);
            null === a && (a = Game.state.gameplayHandler.getBall(),
                a = new Phaser.Point(a.sprite.position.x - a.sprite.width / 2, a.sprite.position.y - a.sprite.height / 2));
            return this.getDistance(a) < this._ballKickDistance ? (a = this.getKickAngle(a), [Math.sin(a) * this._kickForce, Math.cos(a) * this._kickForce * .7]) : [0, 0]
        };
        b.prototype.kick = function() {
            var a = this;
            if (!this._isKicking) {
                util.Sound.playFx("player-kick");
                this._isKicking = !0;
                var b = this._orientationIsLeft ? -1 : 1,
                    e = Game.state.gameplayHandler.getBall(),
                    e = new Phaser.Point(e.sprite.position.x - e.sprite.width / 2, e.sprite.position.y -
                        e.sprite.height / 2),
                    b = new Phaser.Point((e.x - this.x) / this._playerScale * b, (e.y - this.y) / this._playerScale);
                if (this.getDistance(e) < this._ballKickDistance) {
                    var f = this.getKickAngle(e);
                    Game.state.gameplayHandler.ballKick(Math.sin(f) * this._kickForce, Math.cos(f) * this._kickForce * .7)
                } else b = new Phaser.Point(Game.scale(200), Game.scale(200));
                f = this._rightShoeRelativePosition.clone();
                this._rightShoeRelativePosition.set(b.x, b.y);
                this.update(e);
                e = Game.game.add.tween(this._rightShoeRelativePosition).to({
                        x: f.x,
                        y: f.y
                    },
                    this._kickTime, Phaser.Easing.Quadratic.Out, !0);
                this._rightShoeScale.set(1.5 * this._rightShoeScale.x, 1.5 * this._rightShoeScale.y);
                Game.game.add.tween(this._rightShoeScale).to({
                    x: 1,
                    y: 1
                }, this._kickTime, Phaser.Easing.Quadratic.Out, !0);
                b = this._rightShoe.angle;
                this._rightShoe.angle = 60;
                Game.game.add.tween(this._rightShoe).to({
                    angle: b
                }, this._kickTime, Phaser.Easing.Quadratic.Out, !0);
                e.onComplete.add(function() {
                    setTimeout(function() {
                        a._isKicking = !1
                    }, a._kickDelay);
                    a._rightShoeScale.set(1, 1)
                })
            }
        };
        b.prototype.setStatic =
            function(a) {
                void 0 === a && (a = !1);
                this.body.body["static"] = a
            };
        b.prototype.jump = function(a) {
            void 0 === a && (a = Game.scale(2E3));
            if (this.grounded || this._jumpCounter < this._jumpLimit) {
                util.Sound.playFx("player-jump");
                if (!this._isJumping) {
                    this._isJumping = !0;
                    var b = this._orientationIsLeft ? -1 : 1;
                    Game.game.add.tween(this._leftShoe).to({
                        angle: this._leftShoe.angle + 47 * b
                    }, .3 * a, Phaser.Easing.Quadratic.Out, !0);
                    Game.game.add.tween(this._rightShoe).to({
                        angle: this._rightShoe.angle + 50 * b
                    }, .28 * a, Phaser.Easing.Quadratic.In, !0)
                }
                this.body.body.velocity.y = -a;
                this.grounded = !1;
                this._jumpCounter++
            }
        };
        b.prototype.getKickAngle = function(a) {
            return this.getAngle(a) + (this.grounded ? .2 * Math.PI : 0) * (this._orientationIsLeft ? -1 : 1)
        };
        b.prototype.setPosition = function(a) {
            this.x = a.x;
            this.y = a.y;
            this.body.body.x = a.x;
            this.body.body.y = a.y
        };
        b.prototype.setCollisionGroup = function(a) {
            this.body.body.setCollisionGroup(a)
        };
        b.prototype.setCollides = function(a) {
            this.body.body.collides(a)
        };
        b.prototype.ground = function() {
            var a = this._orientationIsLeft ? -1 : 1;
            this.grounded = !0;
            this._jumpCounter =
                0;
            this._isJumping = !1;
            this._leftShoe.angle = this._leftShoeAngle * a;
            this._rightShoe.angle = this._rightShoeAngle * a
        };
        b.prototype.moveLeft = function() {
            this.isMoving = !0;
            this.body.body.moveLeft(this._moveSpeed);
            this._orientationIsLeft = !0;
            this.run()
        };
        b.prototype.orientateLeft = function() {
            this._orientationIsLeft = !0
        };
        b.prototype.orientateRight = function() {
            this._orientationIsLeft = !1
        };
        b.prototype.moveRight = function() {
            this.isMoving = !0;
            this.body.body.moveRight(this._moveSpeed);
            this._orientationIsLeft = !1;
            this.run()
        };
        b.prototype.getDistance = function(a) {
            return Math.sqrt(Math.pow(a.x - this.x, 2) + Math.pow(a.y - this.y, 2))
        };
        b.prototype.getAngle = function(a) {
            return Math.atan2(a.x - this.x, a.y - this.y)
        };
        b.prototype.setPlayerScale = function(a) {
            var b = this;
            void 0 === a && (a = this._playerScale);
            this._playerScale = a;
            this.body.scale.set(this._playerScale, this._playerScale);
            this._playerPolyRaw.forEach(function(a) {
                b._playerPoly.push(a * b.body.width * 2)
            });
            this.body.body.clearShapes();
            this.body.body.addPolygon({}, this._playerPoly)
        };
        b.prototype.lookAtPosition =
            function(a) {
                this._head.scale.x = a.x > this.x ? this._playerScale : -this._playerScale;
                this._head.scale.y = this._playerScale
            };
        b.prototype.lookNatural = function() {
            this._head.scale.x = this._playerScale * (this._orientationIsLeft ? -1 : 1)
        };
        b.prototype._updateRunAnimation = function() {
            this._runSteps++;
            this._rightShoeRelativePosition.set(this._rightShoeRelativeBasePosition.x + Math.sin(this._runSteps / 3) * Game.scale(60), this._rightShoeRelativeBasePosition.y - Math.cos(this._runSteps / 3) * Game.scale(30));
            this._leftShoeRelativePosition.set(this._leftShoeRelativeBasePosition.x +
                Math.sin(this._runSteps / 3 + Math.PI) * Game.scale(60), this._leftShoeRelativeBasePosition.y - Math.cos(this._runSteps / 3 + Math.PI) * Game.scale(30))
        };
        b.prototype.update = function(a) {
            this.x = this.body.body.x;
            this.y = this.body.body.y;
            this.isMoving || (this.body.body.velocity.x *= .6);
            this.body.body.data.force[1] -= Game.scale(1E4);
            this._followBall && this.lookAtPosition(a);
            this._isRunning && this.grounded && !this._isKicking && this._updateRunAnimation();
            this._drawBody();
            this.isMoving = !1
        };
        b.prototype._drawBody = function() {
            var a =
                this._orientationIsLeft ? -1 : 1;
            this._leftArm.position.set(this.x + this._leftArmRelativePosition.x * this._playerScale * a, this.y + this._leftArmRelativePosition.y * this._playerScale);
            this._leftArm.angle = this._leftArmAngle * a;
            this._leftArm.scale.set(this._leftArmScale.x * this._playerScale * a, this._leftArmScale.y * this._playerScale);
            this._rightArm.position.set(this.x + this._rightArmRelativePosition.x * this._playerScale * a, this.y + this._rightArmRelativePosition.y * this._playerScale);
            this._rightArm.angle = this._rightArmAngle *
                a;
            this._rightArm.scale.set(this._rightArmScale.x * this._playerScale * a, this._rightArmScale.y * this._playerScale);
            this._head.position.set(this.x + this._headRelativePosition.x * this._playerScale * a, this.y + this._headRelativePosition.y * this._playerScale);
            this._head.angle = this._headAngle * a;
            this.isMoving && this._head.scale.set(this._headScale.x * this._playerScale * a, this._headScale.y * this._playerScale);
            this._leftShoe.position.set(this.x + this._leftShoeRelativePosition.x * this._playerScale * a, this.y + this._leftShoeRelativePosition.y *
                this._playerScale);
            this._leftShoe.scale.set(this._leftShoeScale.x * this._playerScale * a, this._leftShoeScale.y * this._playerScale);
            this._rightShoe.position.set(this.x + this._rightShoeRelativePosition.x * this._playerScale * a, this.y + this._rightShoeRelativePosition.y * this._playerScale);
            this._rightShoe.scale.set(this._rightShoeScale.x * this._playerScale * a, this._rightShoeScale.y * this._playerScale)
        };
        return b
    }();
    c.Player = d
})(character || (character = {}));
var level;
(function(c) {
    var d = function() {
        function b(a, b) {
            this._fieldDrawer = new c.FieldDrawer;
            this.inGoal = !1;
            this._spriteOffset = new Phaser.Point(0, Game.scale(200));
            this._fieldSize = Game.scale(1980);
            this._fieldDepth = Game.scale(290);
            this._cornerSize = Game.scale(40);
            this._goalAreaSize = Game.scale(250);
            this._midToEnd = this._fieldSize / 2 + this._goalAreaSize + this._cornerSize;
            this._background = Game.game.add.tileSprite(Game.dimensions.width / 2, Game.dimensions.height / 2 - Game.scale(200), Game.dimensions.width, Game.dimensions.height,
                "level", "bg-back", Game.state.farBackLayer);
            this._background.anchor.set(.5, .5);
            this._backgroundTwo = Game.game.add.tileSprite(Game.dimensions.width / 2, Game.dimensions.height / 2 + Game.scale(200), Game.dimensions.width, Game.dimensions.height, "level", "bg-front", Game.state.farBackLayer);
            this._backgroundTwo.anchor.set(.5, .5);
            this._tribune = Game.game.add.sprite(Game.dimensions.width / 2, Game.dimensions.height / 2 + Game.scale(30), "level", "tribune", Game.state.backLayer);
            this._tribune.anchor.set(.5, .5);
            this._crowd = new c.Crowd;
            this.floor = Game.game.add.sprite(0, Game.dimensions.height, "level", "field", Game.state.backLayer);
            this._floorHeight = this.floor.height;
            Game.state.backLayer.add(this.floor);
            Game.game.physics.p2.enable(this.floor);
            this.floor.body.clearShapes();
            this._fieldDrawer.drawArenaOnBody(this.floor.body, this.floor.height, this.floor.height - this._fieldDepth, this._fieldSize, this._cornerSize, this._goalAreaSize);
            this.floor.pivot = this._spriteOffset;
            this.floor.body.x = .5 * Game.dimensions.width + this._spriteOffset.x;
            this.floor.body.y =
                Game.dimensions.height - .5 * this._floorHeight + this._spriteOffset.y;
            this.floor.body.setMaterial(a);
            this.floor.body["static"] = !0;
            this._leftGoal = new c.Goal(b, this._floorHeight, this._midToEnd, !0);
            this._rightGoal = new c.Goal(b, this._floorHeight, this._midToEnd)
        }
        b.prototype.setCollisionGroup = function(a) {
            this.floor.body.setCollisionGroup(a);
            this._leftGoal.setCollisionGroup(a);
            this._rightGoal.setCollisionGroup(a)
        };
        b.prototype.setCollides = function(a, b) {
            void 0 === b && (b = !1);
            b ? this.floor.body.collides(a, function() {
                    util.Sound.playFx("ball-hit-grass")
                }) :
                this.floor.body.collides(a);
            this._leftGoal.setCollides(a, b);
            this._rightGoal.setCollides(a, b)
        };
        b.prototype.getPlayerStart = function(a, b) {
            return new Phaser.Point(Game.dimensions.width / 2 + this._fieldSize / 2 / (b + 1) * (a % b + 1) * (a < b ? -1 : 1), Game.dimensions.height - this._floorHeight)
        };
        b.prototype.killCrowd = function() {
            this._crowd.stop()
        };
        b.prototype.checkGoal = function(a, b, e) {
            var f = this;
            void 0 === e && (e = !0);
            if (!this.inGoal) {
                var c = this._leftGoal.isInGoal(a);
                a = this._rightGoal.isInGoal(a);
                if (c || a) this._crowd.setTempo(100),
                    setTimeout(function() {
                        f._crowd.setTempo(1E3)
                    }, 4E3), e && (this.inGoal = !0), b(a)
            }
        };
        b.prototype.getY = function() {
            return this.floor.body.y + this._spriteOffset.y
        };
        b.prototype.getX = function() {
            return this.floor.body.x + this._spriteOffset.x
        };
        b.prototype.update = function() {
            this._backgroundTwo.tilePosition.x += .2
        };
        return b
    }();
    c.Arena = d
})(level || (level = {}));
(function(c) {
    var d = function() {
        function b(a, b) {
            this.ballPosition = new Phaser.Point;
            this._trajectorySprites = [];
            this._ballScale = .5;
            this._arena = b;
            this._spriteBg = Game.game.add.sprite(0, 0, "level", "ball-back", Game.state.midLayer);
            this._spriteBg.scale.set(this._ballScale, this._ballScale);
            this._spriteBg.anchor.set(.5, .5);
            this._spriteFront = Game.game.add.sprite(0, 0, "level", "ball-front", Game.state.midLayer);
            this._spriteFront.scale.set(this._ballScale, this._ballScale);
            this._spriteFront.anchor.set(.5, .5);
            this.sprite =
                Game.game.add.sprite(0, 0, "level", "ball-front", Game.state.midLayer);
            this.sprite.scale.set(this._ballScale, this._ballScale);
            this.sprite.anchor.set(.5, .5);
            this.sprite.alpha = 0;
            Game.game.physics.p2.enable(this.sprite);
            this.sprite.body.setCircle(.45 * this.sprite.width);
            this.sprite.body.mass = 2;
            this.sprite.body.collideWorldBounds = !0;
            this.sprite.body.setMaterial(a);
            this.setStart(new Phaser.Point(Game.dimensions.width / 2, .75 * Game.dimensions.height), new Phaser.Point(0, 0))
        }
        b.prototype.makeGolden = function() {
            this._spriteBg.frameName =
                "ball-gold-back";
            this._spriteFront.frameName = "ball-gold-front"
        };
        b.prototype.makeNormal = function() {
            this._spriteBg.frameName = "ball-back";
            this._spriteFront.frameName = "ball-front"
        };
        b.prototype.setStart = function(a, b) {
            this.sprite.body.x = a.x;
            this.sprite.body.y = a.y;
            this.sprite.body.setZeroVelocity();
            this.sprite.body.moveRight(b.x);
            this.sprite.body.moveUp(b.y)
        };
        b.prototype.setScale = function(a) {
            void 0 === a && (a = this._ballScale);
            this._ballScale = a;
            this._spriteBg.scale.set(this._ballScale, this._ballScale);
            this._spriteFront.scale.set(this._ballScale,
                this._ballScale);
            this.sprite.scale.set(this._ballScale, this._ballScale)
        };
        b.prototype.setVelocity = function(a) {
            this.sprite.body.velocity.y = a.y;
            this.sprite.body.velocity.x = a.x
        };
        b.prototype.setCollisionGroup = function(a) {
            this.sprite.body.setCollisionGroup(a)
        };
        b.prototype.setCollides = function(a) {
            this.sprite.body.collides(a)
        };
        b.prototype._setupTrajectory = function() {
            for (var a, b = 0; 40 > b; b++) a = util.Sprite.createSprite(10, 10, {
                r: 255,
                g: 255,
                b: 255
            }), a.alpha = .5, this._trajectorySprites.push(a);
            Game.state.frontLayer.addMultiple(this._trajectorySprites)
        };
        b.prototype.willBallLandInGoal = function(a, b, e) {
            void 0 === a && (a = null);
            void 0 === b && (b = null);
            void 0 === e && (e = .025);
            a = this.getTrajectory(a, b, e);
            var f = 0;
            for (b = 0; b < a.length; b++) this._arena.checkGoal(a[b], function(a) {
                f = a ? -1 : 1
            }, !1);
            return f
        };
        b.prototype.getLandingPosition = function() {
            var a = this.getTrajectory();
            return 2 > a.length ? a[0].x : a[a.length - 2].x
        };
        b.prototype.getTrajectory = function(a, b, e) {
            void 0 === a && (a = null);
            void 0 === b && (b = null);
            void 0 === e && (e = .025);
            if (null === b) {
                var f = this.sprite.body.x;
                b = this.sprite.body.y
            } else f =
                b.x, b = b.y;
            null === a && (a = [this.sprite.body.velocity.x / 10, this.sprite.body.velocity.y / 10]);
            for (var c = [], d = 0; d < 40 * e && !(f += a[0], b += a[1] + Game.scale(9E3) * d * d, c.push(new Phaser.Point(f, b)), b > Game.dimensions.height - Game.scale(400)); d += e);
            return c
        };
        b.prototype.drawTrajectory = function() {
            for (var a = 0, b = this.getTrajectory(), e = 0; e < b.length && (this._trajectorySprites[a].position.set(b[e].x, b[e].y), a++, 40 !== a); e++);
        };
        b.prototype.update = function() {
            this.ballPosition.set(this.sprite.body.x, this.sprite.body.y);
            this._spriteBg.x =
                this.sprite.body.x;
            this._spriteBg.y = this.sprite.body.y;
            this._spriteFront.x = this.sprite.body.x;
            this._spriteFront.y = this.sprite.body.y;
            this._spriteFront.angle = this.sprite.body.angle
        };
        return b
    }();
    c.Ball = d
})(level || (level = {}));
(function(c) {
    var d = function(b) {
        function a() {
            b.call(this, Game.game);
            this._lastFrame = 6;
            this._currentFrame = 0;
            this._reflecting = !1;
            this._sprite = Game.game.add.sprite(0, 0, "level", "frame0", this);
            this._sprite.anchor.set(.5, .5);
            this._sprite.visible = !1
        }
        __extends(a, b);
        a.prototype.doReflect = function() {
            this._reflecting || (this._reflecting = !0, this._reflect())
        };
        a.prototype._reflect = function() {
            var a = this;
            this._currentFrame < this._lastFrame ? (this._sprite.visible = !0, this._sprite.frameName = "frame" + this._currentFrame, this._currentFrame++,
                setTimeout(function() {
                    a._reflect()
                }, 66)) : (this._currentFrame = 0, this._reflecting = this._sprite.visible = !1)
        };
        return a
    }(Phaser.Group);
    c.BallReflect = d
})(level || (level = {}));
(function(c) {
    var d = function() {
        function b() {
            this._crowdTempo = 1E3;
            this._crowdFrames = "crowd-1 crowd-2 crowd-3 crowd-4 crowd-5 crowd-4 crowd-3 crowd-2".split(" ");
            this._currentFrameIndex = 0;
            this._looping = !0;
            this._crowdSprite = Game.game.add.sprite(Game.dimensions.width / 2, Game.dimensions.height / 2 + Game.scale(130), "character", this._crowdFrames[0], Game.state.backLayer);
            this._crowdSprite.anchor.set(.5, .5);
            this._loop()
        }
        b.prototype.setTempo = function(a) {
            this._crowdTempo = a
        };
        b.prototype.stop = function() {
            this._looping = !1;
            this._crowdSprite.destroy()
        };
        b.prototype.start = function() {
            this._looping = !0
        };
        b.prototype._loop = function() {
            var a = this;
            setTimeout(function() {
                a._looping && a._crowdSprite.visible && (a._nextFrame(), a._loop())
            }, this._crowdTempo)
        };
        b.prototype._nextFrame = function() {
            this._currentFrameIndex++;
            this._currentFrameIndex === this._crowdFrames.length && (this._currentFrameIndex = 0);
            this._crowdSprite.frameName = this._crowdFrames[this._currentFrameIndex]
        };
        return b
    }();
    c.Crowd = d
})(level || (level = {}));
(function(c) {
    var d = function() {
        function b() {}
        b.prototype.drawArenaOnBody = function(a, b, e, f, c, d) {
            f = .5 * f + c + d;
            a.addPolygon({}, [
                [-f, 0],
                [-f, -b],
                [-f + d, -b],
                [-f + d + c, -b + c],
                [-f + d + c, -e - c],
                [-f + d + 2 * c, -e],
                [f - d - 2 * c, -e],
                [f - d - c, -e - c],
                [f - d - c, -b + c],
                [f - d, -b],
                [f, -b],
                [f, 0]
            ])
        };
        return b
    }();
    c.FieldDrawer = d
})(level || (level = {}));
(function(c) {
    var d = function() {
        function b(a, b, e, f) {
            var d = this;
            void 0 === f && (f = !1);
            this._isLeft = !1;
            this._isLeft = f;
            this._spriteBack = Game.game.add.sprite(0, 0, "level", "goal-back", Game.state.backLayer);
            this._spriteBack.anchor.set(.5, 1);
            this._spriteBack.y = Game.dimensions.height - b + Game.scale(152);
            this._sprite = Game.game.add.sprite(0, 0, "level", "goal-front", Game.state.frontLayer);
            this._sprite.y = Game.dimensions.height - b + Game.scale(177);
            this._sprite.anchor.set(.5, 1);
            this.bar = Game.game.add.existing(util.Sprite.createSprite(this._sprite.width,
                Game.scale(40), {
                    r: 0,
                    g: 0,
                    b: 0
                }));
            this.bar.anchor.set(.5, 1);
            this.net = Game.game.add.existing(util.Sprite.createSprite(this._sprite.width, 8 * Game.dimensions.height, {
                r: 0,
                g: 0,
                b: 0
            }));
            this.net.anchor.set(.5, 1);
            Game.game.physics.p2.enable(this.bar);
            Game.game.physics.p2.enable(this.net);
            this.bar.body.setMaterial(a);
            this.net.body.setMaterial(a);
            a = e - Game.scale(90);
            e -= Game.scale(58);
            this._ballReflect = new c.BallReflect;
            f ? (this._sprite.scale.x *= -1, this._spriteBack.scale.x *= -1, this._sprite.x = Game.dimensions.width /
                2 - e, this._spriteBack.x = Game.dimensions.width / 2 - a) : (this._sprite.x = Game.dimensions.width / 2 + e, this._spriteBack.x = Game.dimensions.width / 2 + a);
            this.bar.alpha = 0;
            this.bar.body.angle = 12 * (f ? 1 : -1);
            this.bar.body.x = this._sprite.x + Game.scale(25) * (f ? 1 : -1);
            this.bar.body.y = Game.dimensions.height - this._sprite.height - b + Game.scale(930);
            this.bar.body["static"] = !0;
            this.net.alpha = 0;
            this.net.body.x = this._sprite.x + Game.scale(170) * (f ? -1 : 1);
            this.net.body.y = -Game.dimensions.height;
            this.net.body["static"] = !0;
            this._ballReflect.x =
                this._sprite.x;
            this.net.body.onBeginContact.add(function(a) {
                d._ballReflect.position.y = a.y;
                d._ballReflect.doReflect()
            })
        }
        b.prototype.isInGoal = function(a) {
            if (a.y > this._sprite.y - .4 * this._sprite.height && a.y < this._sprite.y)
                if (this._isLeft) {
                    if (a.x < this._sprite.x + .5 * Math.abs(this._sprite.width)) return !0
                } else if (a.x > this._sprite.x - .5 * this._sprite.width) return !0;
            return !1
        };
        b.prototype.setCollisionGroup = function(a) {
            this.bar.body.setCollisionGroup(a);
            this.net.body.setCollisionGroup(a)
        };
        b.prototype.setCollides =
            function(a, b) {
                void 0 === b && (b = !1);
                b ? (this.bar.body.collides(a, function() {
                    util.Sound.playFx("ball-hit-metal")
                }), this.net.body.collides(a, function() {
                    util.Sound.playFx("ball-hit-wood")
                })) : (this.bar.body.collides(a), this.net.body.collides(a))
            };
        return b
    }();
    c.Goal = d
})(level || (level = {}));
var logic;
(function(c) {
    var d = function() {
        function b(a, b, e, f, c, d) {
            void 0 === c && (c = 1);
            void 0 === d && (d = "defender");
            this._ally = null;
            this._maxDifficulty = 9;
            this._ballPosition = new Phaser.Point;
            this.inputAllowed = !0;
            this._isStunned = !1;
            this._steps = 0;
            this._player = a;
            this._ball = e;
            this._arena = f;
            this._maxKickDelta = .55 * a.getBallKickDistance() * (a.isLeft ? 1 : -1);
            this._minKickDelta = .2 * this._maxKickDelta;
            this._jumpDistance = 1.5 * a.body.height;
            this._players = b;
            this._enemies = [];
            this._ally = null;
            this._steps = Math.floor(30 * Math.random());
            this._setAlliesAndEnemies();
            this._nearBallDistance = this._ally ? Game.dimensions.width / 5 : Game.dimensions.width / 3;
            this._difficulty = c;
            this._difficulty > this._maxDifficulty && (this._difficulty = this._maxDifficulty);
            this._role = 2 > this._difficulty ? "idiot" : d;
            this._bufferBallPositionForSteps = 10 * (10 - this._difficulty);
            this._ownGoalPosition = new Phaser.Point(Game.dimensions.width / 2 - Game.scale(1030) * (a.isLeft ? -1 : 1), Game.dimensions.height - Game.scale(800));
            this._otherGoalPosition = new Phaser.Point(Game.dimensions.width / 2 + Game.scale(1030) * (a.isLeft ?
                -1 : 1), Game.dimensions.height - Game.scale(800));
            this._doEventBindings()
        }
        b.prototype._doEventBindings = function() {
            var a = this;
            Game.events.addListener("playerPunch", function(b) {
                b = b[0];
                a._player.isCharacter(b.playerKey) || (a._isStunned = !0, setTimeout(function() {
                    a._isStunned = !1
                }, a._player.stunTime))
            })
        };
        b.prototype._getDifficultyModifier = function(a) {
            void 0 === a && (a = 1);
            return this._difficulty / this._maxDifficulty * a
        };
        b.prototype._isAlly = function(a) {
            return this._player.isLeft === a.isLeft && this._player !== a
        };
        b.prototype._setAlliesAndEnemies =
            function() {
                for (var a = 0; a < this._players.length; a++) this._isAlly(this._players[a]) ? this._ally = this._players[a] : this._enemies.push(this._players[a])
            };
        b.prototype._estimatedShot = function(a, b) {
            var e = this;
            void 0 === a && (a = 100);
            void 0 === b && (b = 0);
            for (var c = 0, d = !1, h = .0167 / (a / 100), m = this._ball.getTrajectory(null, null, h), k = [0, 0], n = k = 0; n < m.length; n++)
                if (k = this._player.getKickVelocityIfWeKickBallAtPosition(m[n]), 0 !== k[0] || 0 !== k[1])
                    if (k = this._ball.willBallLandInGoal([10 * k[0], 10 * k[1]], m[n], h), this._player.isLeft &&
                        1 === k || !this._player.isLeft && -1 === k) {
                        d = !1;
                        c = n * h;
                        break
                    } else if (this._player.isLeft && -1 === k || !this._player.isLeft && 1 === k) d = !0;
            d || setTimeout(function() {
                e._quickShot()
            }, c + b)
        };
        b.prototype._averageShot = function() {
            this._estimatedShot(this._getDifficultyModifier(80), 40 - this._getDifficultyModifier(40))
        };
        b.prototype._lateShot = function() {
            this._estimatedShot(this._getDifficultyModifier(100), 150 - this._getDifficultyModifier(130))
        };
        b.prototype._perfectShot = function() {
            this._estimatedShot(100, 0)
        };
        b.prototype._quickShot =
            function() {
                this._player.kick()
            };
        b.prototype._goToOwnGoal = function() {
            this._goToPosition(this._ownGoalPosition.x, Game.scale(50));
            Math.abs(this._ownGoalPosition.x - this._player.x) < Game.scale(250) && Math.abs(this._ownGoalPosition.y - this._player.y) > Game.scale(100) && this._player.jump()
        };
        b.prototype._goToOtherGoal = function() {
            this._goToPosition(this._otherGoalPosition.x + Game.scale(200) * (this._player.isLeft ? -1 : 1), Game.scale(200))
        };
        b.prototype._goToPosition = function(a, b) {
            this._player.x > a - b && this._player.x < a +
                b || (this._player.x < a - b ? this._player.moveRight() : this._player.x > a + b && this._player.moveLeft())
        };
        b.prototype._doRole = function() {
            switch (this._role) {
                case "defender":
                    this._goToOwnGoal();
                    break;
                case "attacker":
                    this._goToBall();
                    break;
                case "idiot":
                    this._doIdiot()
            }
        };
        b.prototype._getIdealBallPosition = function() {
            return this._ballPosition.x + this._maxKickDelta
        };
        b.prototype._doIdiot = function() {
            this._player.getDistance(this._ballPosition) < .3 * this._nearBallDistance ? this._goToBallTrajectory() : (this._goToPosition(.65 *
                Game.dimensions.width + Math.sin(this._steps / 30) * Game.dimensions.height * .3, Game.scale(300)), .98 < Math.random() && this._player.jump())
        };
        b.prototype._goToBall = function() {
            var a = this._getIdealBallPosition();
            this._goToPosition(a, .5 * Math.abs(this._maxKickDelta))
        };
        b.prototype._resetBallTrajectory = function() {
            this._trajectoryTargetHorizontalPosition = this._ball.getLandingPosition() + this._maxKickDelta
        };
        b.prototype._goToBallTrajectory = function() {
            this._trajectoryTargetHorizontalPosition || this._resetBallTrajectory();
            this._goToPosition(this._trajectoryTargetHorizontalPosition, .5 * Math.abs(this._maxKickDelta))
        };
        b.prototype._playerVerticallyAlignedToBall = function() {
            return this._ballPosition.y > this._player.body.y - Math.max(Game.scale(200), Game.scale(100) * this._difficulty) && this._ballPosition.y < this._player.body.y + Math.max(Game.scale(200), Game.scale(100) * this._difficulty)
        };
        b.prototype._playerUnderBall = function() {
            return this._ballPosition.y > this._player.y - 2 * this._jumpDistance && this._ballPosition.y < this._player.y - .75 *
                this._jumpDistance
        };
        b.prototype._playerHorizontallyAlignedToBall = function() {
            var a = this._getIdealBallPosition(),
                b = Math.abs(this._maxKickDelta);
            return this._player.x > a - b && this._player.x < a + b ? !0 : !1
        };
        b.prototype.update = function() {
            this._player.idle();
            this._steps++;
            0 === this._steps % this._bufferBallPositionForSteps && (this._ballPosition = this._ball.ballPosition, this._resetBallTrajectory());
            if (this.inputAllowed && !this._isStunned) {
                if (5 < this._difficulty) {
                    var a = this._ball.willBallLandInGoal();
                    0 !== a && (this._player.isLeft &&
                        -1 === a ? (this._goToOwnGoal(), Math.abs(this._ballPosition.x - this._player.x) < Game.scale(150) && this._ballPosition.y - Game.scale(50) < this._player.y && this._player.jump()) : this._goToPosition(Game.dimensions.width / 2, Game.scale(150)))
                }
                "defender" === this._role && this._ally && this._ally.getDistance(this._ballPosition) < this._nearBallDistance || "idiot" === this._role ? this._doRole() : this._player.getDistance(this._ballPosition) < this._nearBallDistance ? 5 < this._difficulty ? this._goToBall() : this._goToBallTrajectory() : this._doRole();
                if (this._playerHorizontallyAlignedToBall() && (this._playerUnderBall() && this._player.jump(), this._playerVerticallyAlignedToBall()))
                    if (2 > this._difficulty) this._lateShot();
                    else if (a = Math.random(), 6 > this._difficulty) switch (!0) {
                    case 0 < a:
                        this._averageShot();
                        break;
                    case .33 < a:
                        this._lateShot();
                        break;
                    case .67 < a:
                        this._quickShot()
                } else if (9 > this._difficulty) switch (!0) {
                    case 0 < a:
                        this._averageShot();
                        break;
                    case .33 < a:
                        this._quickShot();
                        break;
                    case .67 < a:
                        this._perfectShot()
                } else this._perfectShot()
            }
        };
        b.AILevels = {
            easy: 1,
            medium: 5,
            hard: 9
        };
        return b
    }();
    c.AIControls = d
})(logic || (logic = {}));
(function(c) {
    var d = function() {
        function b(a) {
            var b = this;
            this._players = [];
            this._playerControls = [];
            this._aiControls = [];
            this._ballPosition = new Phaser.Point;
            this._isGoldenGoal = this._isInHalfOrFullTimeCallback = !1;
            this._matchCompleteCallback = null;
            this._isPaused = !1;
            this._adTexts = 'Nice match keep it up!;Epic goals.;You are killing it!;Thanks for the games!;Don\'t forget to play 1010 Deluxe;Did you play "Roger Dead: Zombie Biker?";This ad is epic, just like you!'.split(";");
            this._setupPhysics();
            this._setupPauseEvents();
            var e = Game.game.physics.p2.createMaterial("ballMaterial"),
                f = Game.game.physics.p2.createMaterial("arenaMaterial"),
                d = Game.game.physics.p2.createMaterial("fieldMaterial"),
                h = Game.game.physics.p2.createMaterial("playerMaterial");
            this._gameUI = new ui.GameUI;
            this._arena = new level.Arena(d, f);
            this._scoreHandler = new c.ScoreHandler;
            this._setupTimer();
            for (var m = a.humanControlledPlayers.length + a.aiControlledPlayers.length, k = m / 2, n = 0; n < m; n++) this._players.push(new character.Player(a.players[n], h, n >= k));
            this._ball =
                new level.Ball(e, this._arena);
            Game.game.physics.p2.createContactMaterial(e, d).restitution = .8;
            Game.game.physics.p2.createContactMaterial(e, f).restitution = .6;
            Game.game.physics.p2.createContactMaterial(e, h).restitution = .3;
            this._setupCollisions();
            this._setupControls(a.humanControlledPlayers, a.aiControlledPlayers, a.aiLevels, a.playerControlIndexes);
            this._adUI = new util.PokiAdUI;
            this._matchCompleteCallback = a.rematchPossible ? function() {
                    b._gameUI.questionDisplay("REMATCH?", function() {
                        b.rematch()
                    }, function() {
                        a.matchCompleteCallback(b._scoreHandler.score)
                    })
                } :
                function() {
                    a.matchCompleteCallback(b._scoreHandler.score)
                }
        }
        b.prototype._setupPauseEvents = function() {
            var a = this;
            Game.events.addListener("inGamePause", function() {
                a._isPaused || (a._isPaused = !0, a.disableInput(), a._timer.pause())
            });
            Game.events.addListener("inGameResume", function() {
                a._isPaused ? a._gameUI.doCountDown(function() {
                    a._isPaused = !1;
                    a._timer.resume();
                    a.enableInput()
                }) : (a._timer.resume(), a.enableInput())
            })
        };
        b.prototype._setupTimer = function() {
            var a = this;
            this._timer = new c.Timer(function(b) {
                    a._gameUI.setTime(b)
                },
                function() {
                    util.Sound.playFx("whistle-halftime");
                    a._gameUI.flashText("HALF TIME");
                    a.disableInput();
                    a._isInHalfOrFullTimeCallback = !0;
                    a._doHalfTimeAdCall()
                }, function() {
                    util.Sound.playFx("whistle-halftime");
                    a.disableInput();
                    a._isInHalfOrFullTimeCallback = !0;
                    a._scoreHandler.score[0] === a._scoreHandler.score[1] ? (a._gameUI.flashGoldenGoal(), setTimeout(function() {
                        a.goldenGoalKickoff()
                    }, 2E3)) : a._doEndScreen()
                })
        };
        b.prototype._doHalfTimeAdCall = function() {
            var a = this;
            this._adUI && util.PokiAds.isLoaded ? setTimeout(function() {
                a._adUI.init(poki.ads.position.midrollPositive,
                    function() {
                        a.kickoff();
                        a._isInHalfOrFullTimeCallback = !1
                    }, a._adTexts[Math.floor(a._adTexts.length * Math.random())])
            }, 3E3) : setTimeout(function() {
                a.kickoff();
                a._isInHalfOrFullTimeCallback = !1
            }, 3E3)
        };
        b.prototype._doEndScreen = function() {
            var a = this,
                b = this._scoreHandler.score[0] > this._scoreHandler.score[1];
            b ? this._scoreHandler.leftMatch() : this._scoreHandler.rightMatch();
            this._responseAnimations(b);
            this._gameUI.setMatchHistory(this._scoreHandler.matchHistory[0] + "", this._scoreHandler.matchHistory[1] + "");
            this._gameUI.endScreen(function() {
                a._restartCallback()
            })
        };
        b.prototype._restartCallback = function() {
            this._matchCompleteCallback(this._scoreHandler.score)
        };
        b.prototype.gameUIQuestion = function(a, b, e) {
            this._gameUI.questionDisplay(a.toUpperCase(), b, e)
        };
        b.prototype._setupControls = function(a, b, e, f, d) {
            void 0 === d && (d = ["attacker", "defender"]);
            if (Game.game.device.desktop) {
                var h = [c.InputList.getPlayerControlsForPlayer(0), c.InputList.getPlayerControlsForPlayer(1), c.InputList.getPlayerControlsForPlayer(2), c.InputList.getPlayerControlsForPlayer(3)];
                this._controlIndicators = [];
                for (var m = 0, k = 0; k < a.length; k++) this._playerControls.push(new c.PlayerControls(h[f[k]][0], h[f[k]][1], h[f[k]][2], h[f[k]][3], this._players[a[k]])), this._controlIndicators.push(new ui.ControlsIndicator(new Phaser.Point(0, 0), !1, f[k])), m++
            } else "undefined" !== typeof this._players[0] && this._playerControls.push(new c.MobileControls(this._players[0]));
            for (f = 0; f < b.length; f++) this._aiControls.push(new c.AIControls(this._players[b[f]], this._players, this._ball, this._arena, e[f], d[f % d.length]));
            if (Game.game.device.desktop)
                for (e =
                    Game.dimensions.height - Game.scale(130), d = Game.dimensions.width / 2, f = 0; f < this._controlIndicators.length; f++) this._controlIndicators[f].scale.set(.9, .9), this._controlIndicators[f].alpha = .8, 2 < a.length + b.length ? (this._controlIndicators[f].y = e, this._controlIndicators[f].x = 2 > f ? d - Game.scale(1100) + f * Game.scale(400) : d + Game.scale(1100) - (f - 2) * Game.scale(400)) : (this._controlIndicators[f].y = e, this._controlIndicators[f].x = 1 > f ? d - Game.scale(1100) : d + Game.scale(1100))
        };
        b.prototype._setupPhysics = function() {
            Game.game.physics.startSystem(Phaser.Physics.P2JS);
            Game.game.physics.p2.gravity.y = Game.scale(1600);
            Game.game.physics.p2.world.defaultContactMaterial.friction = .3;
            Game.game.physics.p2.world.setGlobalStiffness(1E5);
            Game.game.physics.p2.setImpactEvents(!0)
        };
        b.prototype._setupCollisions = function() {
            this._arenaCollisionGroup = Game.game.physics.p2.createCollisionGroup();
            this._ballCollisionGroup = Game.game.physics.p2.createCollisionGroup();
            this._playerCollisionGroup = Game.game.physics.p2.createCollisionGroup();
            this._arena.setCollisionGroup(this._arenaCollisionGroup);
            this._ball.setCollisionGroup(this._ballCollisionGroup);
            this._ball.setCollides([this._arenaCollisionGroup, this._playerCollisionGroup]);
            for (var a = 0; a < this._players.length; a++) this._players[a].setCollisionGroup(this._playerCollisionGroup), this._players[a].setCollides([this._arenaCollisionGroup, this._playerCollisionGroup, this._ballCollisionGroup]);
            this._arena.setCollides(this._playerCollisionGroup);
            this._arena.setCollides(this._ballCollisionGroup, !0);
            Game.game.physics.p2.updateBoundsCollisionGroup();
            for (var b = this, e = function(a, e, c, d, k) {
                if (a === b._arena.floor.body) this.ground();
                else
                    for (e = 0; e < b._players.length; e++)
                        if (a === b._players[e].body.body && b._players[e].grounded) {
                            this.ground();
                            break
                        }
            }, a = 0; a < this._players.length; a++) this._players[a].body.body.onBeginContact.add(e, this._players[a])
        };
        b.prototype.ballContact = function(a) {};
        b.prototype.ballKick = function(a, b) {
            var e = this._ball.sprite.body;
            e.setZeroVelocity();
            e.moveDown(b);
            e.moveRight(a);
            e = (new Phaser.Point(Math.abs(e.velocity.x), Math.abs(e.velocity.y))).getMagnitude();
            1200 > e ? util.Sound.playFx("ball-kick-normal") : 1400 > e ? util.Sound.playFx("ball-kick-hard") : util.Sound.playFx("ball-kick-hardest")
        };
        b.prototype.disableInput = function() {
            for (var a = 0; a < this._playerControls.length; a++) this._playerControls[a].inputAllowed = !1;
            for (a = 0; a < this._aiControls.length; a++) this._aiControls[a].inputAllowed = !1
        };
        b.prototype.enableInput = function() {
            for (var a = 0; a < this._playerControls.length; a++) this._playerControls[a].inputAllowed = !0;
            for (a = 0; a < this._aiControls.length; a++) this._aiControls[a].inputAllowed = !0
        };
        b.prototype.kickoff = function() {
            var a = this;
            this._goalTimeout && clearTimeout(this._goalTimeout);
            this._isGoldenGoal = this._arena.inGoal = !1;
            this.disableInput();
            this.startGame();
            this._gameUI.doCountDown(function() {
                a._isPaused || (a._timer.resume(), a.enableInput())
            })
        };
        b.prototype.goldenGoalKickoff = function() {
            var a = this;
            this._goalTimeout && clearTimeout(this._goalTimeout);
            this._ball.makeGolden();
            this._isGoldenGoal = !0;
            this._arena.inGoal = !1;
            this.disableInput();
            this.startGame();
            this._isInHalfOrFullTimeCallback = !1;
            this._gameUI.doCountDown(function() {
                a.enableInput()
            })
        };
        b.prototype.rematch = function() {
            this._timer.reset();
            this._scoreHandler.reset();
            this._gameUI.setTime("0000");
            this._isInHalfOrFullTimeCallback = this._arena.inGoal = !1;
            this._gameUI.setScore(this._scoreHandler.score);
            this.kickoff();
            this._ball.makeNormal()
        };
        b.prototype.startGame = function() {
            for (var a = this._players.length / 2, b = 0; b < this._players.length; b++) this._players[b].setPosition(this._arena.getPlayerStart(b, a)), b >= a ? this._players[b].orientateLeft() :
                this._players[b].orientateRight();
            this._ball.setStart(new Phaser.Point(.5 * Game.dimensions.width, .3 * Game.dimensions.height), new Phaser.Point((this._scoreHandler.score[0] - this._scoreHandler.score[1]) * Game.scale(5), 0))
        };
        b.prototype.killCrowd = function() {
            this._arena.killCrowd()
        };
        b.prototype.getBall = function() {
            return this._ball
        };
        b.prototype._responseAnimations = function(a) {
            a ? 2 < this._players.length ? (this._players[0].cheer(3E3), this._players[1].cheer(3E3), this._players[2].sad(3E3), this._players[3].sad(3E3)) :
                (this._players[0].cheer(3E3), this._players[1].sad(3E3)) : 2 < this._players.length ? (this._players[2].cheer(3E3), this._players[3].cheer(3E3), this._players[0].sad(3E3), this._players[1].sad(3E3)) : (this._players[1].cheer(3E3), this._players[0].sad(3E3))
        };
        b.prototype.update = function() {
            var a = this;
            this._ballPosition.set(this._ball.sprite.body.x, this._ball.sprite.body.y);
            for (var b = 0; b < this._players.length; b++) this._players[b].update(this._ballPosition);
            for (b = 0; b < this._playerControls.length; b++) this._playerControls[b].update();
            for (b = 0; b < this._aiControls.length; b++) this._aiControls[b].update();
            this._arena.update();
            this._ball.update();
            this._isPaused || this._isInHalfOrFullTimeCallback || this._arena.checkGoal(this._ballPosition, function(b) {
                Game.state.gameplayHandler.disableInput();
                util.Sound.playFx("crowd-goal");
                b ? a._scoreHandler.leftScored() : a._scoreHandler.rightScored();
                a._responseAnimations(b);
                a._timer.pause();
                a._gameUI.flashGoal();
                a._gameUI.setScore(a._scoreHandler.score);
                a._goalTimeout = setTimeout(function() {
                    a._isGoldenGoal ?
                        (a._doEndScreen(), a._isInHalfOrFullTimeCallback = !0) : a.kickoff();
                    a._arena.inGoal = !1
                }, 3E3)
            })
        };
        b._adAttempt = 0;
        return b
    }();
    c.GameplayHandler = d
})(logic || (logic = {}));
(function(c) {
    var d = function() {
        return function(b, a, g, e, c, d, h) {
            this.humanControlledPlayers = b;
            this.aiControlledPlayers = a;
            this.aiLevels = g;
            this.players = e;
            this.rematchPossible = d;
            this.playerControlIndexes = c;
            this.matchCompleteCallback = h
        }
    }();
    c.GameplaySettings = d
})(logic || (logic = {}));
(function(c) {
    var d = function() {
        function b() {}
        b.getPlayerControlsForPlayer = function(a) {
            void 0 === a && (a = 0);
            var b = Game.game.input.keyboard.createCursorKeys();
            return [
                [b.left, b.right, Game.game.input.keyboard.addKey(32), b.up],
                [Game.game.input.keyboard.addKey(49), Game.game.input.keyboard.addKey(51), Game.game.input.keyboard.addKey(48), Game.game.input.keyboard.addKey(53)],
                [Game.game.input.keyboard.addKey(65), Game.game.input.keyboard.addKey(68), Game.game.input.keyboard.addKey(81), Game.game.input.keyboard.addKey(87)],
                [Game.game.input.keyboard.addKey(74), Game.game.input.keyboard.addKey(76), Game.game.input.keyboard.addKey(79), Game.game.input.keyboard.addKey(72)]
            ][a]
        };
        b.getPlayerTextControlsForPlayer = function(a) {
            void 0 === a && (a = 0);
            return [
                ["left", "right", "_", "up"],
                ["1", "3", "0", "5"],
                ["A", "D", "Q", "W"],
                ["J", "L", "H", "I"]
            ][a]
        };
        return b
    }();
    c.InputList = d
})(logic || (logic = {}));
(function(c) {
    var d = function() {
        function b(a, b, e, c, d) {
            this._isStunned = !1;
            this.inputAllowed = !0;
            this._leftKey = a;
            this._rightKey = b;
            this._kickKey = e;
            this._jumpKey = c;
            this._player = d;
            this._doEventBindings()
        }
        b.prototype._doEventBindings = function() {
            var a = this;
            Game.events.addListener("playerPunch", function(b) {
                b = b[0];
                a._player.isCharacter(b.playerKey) || (a._isStunned = !0, setTimeout(function() {
                    a._isStunned = !1
                }, a._player.stunTime))
            })
        };
        b.prototype.update = function() {
            !this.inputAllowed || this._isStunned ? (this._player.idle(),
                this._jumpKey.justDown, this._kickKey.justDown) : (this._leftKey.isDown && !this._rightKey.isDown && this._player.moveLeft(), this._rightKey.isDown && !this._leftKey.isDown && this._player.moveRight(), this._rightKey.isUp && this._leftKey.isUp && this._player.idle(), this._jumpKey.justDown && this._player.jump(), this._kickKey.justDown && this._player.kick())
        };
        return b
    }();
    c.PlayerControls = d
})(logic || (logic = {}));
(function(c) {
    var d = function() {
        function b() {
            this.score = [0, 0];
            this.matchHistory = [0, 0]
        }
        b.prototype.leftScored = function() {
            this.score[0]++
        };
        b.prototype.rightScored = function() {
            this.score[1]++
        };
        b.prototype.reset = function() {
            this.score = [0, 0]
        };
        b.prototype.leftMatch = function() {
            this.matchHistory[0]++
        };
        b.prototype.rightMatch = function() {
            this.matchHistory[1]++
        };
        b.prototype.resetMathHistory = function() {
            this.matchHistory = [0, 0]
        };
        return b
    }();
    c.ScoreHandler = d
})(logic || (logic = {}));
(function(c) {
    var d = function() {
        function b(a, b, e) {
            this._timeLimit = 90;
            this._actualTimeLimit = 60;
            this._currentTime = 0;
            this._timer = null;
            this.halfTime = !1;
            this._timerCallback = a;
            this._halftimeCallback = b;
            this._fulltimeCallback = e
        }
        b.prototype.reset = function() {
            this._currentTime = 0;
            this.halfTime = !1
        };
        b.prototype.resume = function() {
            var a = this;
            clearInterval(this._timer);
            this._timer = setInterval(function() {
                a._currentTime += a._timeLimit / a._actualTimeLimit;
                a._checkTimerCallbacks()
            }, 1E3 / 60)
        };
        b.prototype.pause = function() {
            clearInterval(this._timer)
        };
        b.prototype._checkTimerCallbacks = function() {
            var a = this._getDisplayTime(),
                b = 60 * this._timeLimit;
            this._timerCallback(a);
            this._currentTime >= b / 2 && !this.halfTime && (this.pause(), this.halfTime = !0, this._halftimeCallback());
            this._currentTime >= b && (this.pause(), this._fulltimeCallback())
        };
        b.prototype._getDisplayTime = function() {
            var a = Math.floor(this._currentTime / 60) + "",
                b = Math.floor(this._currentTime) % 60 + "";
            return String("00" + a).slice(a.length) + String("00" + b).slice(b.length)
        };
        return b
    }();
    c.Timer = d
})(logic || (logic = {}));
(function(c) {
    var d = function() {
        function b(a, b, e) {
            void 0 === a && (a = [0, 0]);
            void 0 === b && (b = null);
            void 0 === e && (e = !1);
            this.score = a;
            this.teams = b;
            this.gameFinished = e
        }
        b.fromCache = function(a) {
            return new b(a.score, a.teams, a.gameFinished)
        };
        b.prototype.setTeams = function(a) {
            this.teams = a
        };
        b.prototype.getTeams = function() {
            return this.teams
        };
        b.prototype.setScore = function(a, b) {
            void 0 === b && (b = !1);
            this.score = a;
            this.gameFinished = b
        };
        b.prototype.randomizeResult = function() {
            if (!this.gameFinished) {
                for (; this.score[0] === this.score[1];) this.score[0] = Math.floor(11 *
                    Math.random()), this.score[1] = Math.floor(10 * Math.random());
                this.gameFinished = !0
            }
        };
        b.prototype.getResult = function() {
            return this.gameFinished ? this.score : null
        };
        b.prototype.getWinner = function() {
            return this.gameFinished ? this.score[0] > this.score[1] ? this.teams[0] : this.teams[1] : null
        };
        return b
    }();
    c.TourneyGame = d
})(logic || (logic = {}));
(function(c) {
    var d = function() {
        function b() {}
        b.hasActiveTourney = function() {
            var a = Game.save.load(b.playerPrefix + "activeTourney");
            if (a) {
                for (var g = 0; g < a.length; g++)
                    for (var e = 0; e < a[g].length; e++) a[g][e] = c.TourneyGame.fromCache(a[g][e]);
                b.tourneyRounds = a;
                b.selectedPlayers = Game.save.load(b.playerPrefix + "selectedPlayers");
                b.selectedTeam = Game.save.load(b.playerPrefix + "selectedTeam");
                b.currentRoundIndex = Game.save.load(b.playerPrefix + "currentRoundIndex");
                b.activeTeams = Game.save.load(b.playerPrefix + "activeTeams");
                return !0
            }
            return !1
        };
        b.createNewTourney = function(a, g, e) {
            void 0 === e && (e = 8);
            b.tourneyRounds = [];
            b.activeTeams = [];
            b.currentRoundIndex = 0;
            b.selectedTeam = a;
            b.selectedPlayers = g;
            for (g = 0;.5 < e / 2;) {
                for (var f = [], d = 0; d < e; d += 2) f.push(new c.TourneyGame);
                b.tourneyRounds[g] = f;
                g++;
                e /= 2
            }
            b.activeTeams.push(a.name);
            e = b.getRandomUnPickedTeam();
            b.activeTeams.push(e.name);
            b.setTeamsForRound(0, 0, [a, e]);
            b.fillUpRandomly();
            b.save()
        };
        b.forEachCurrentGame = function(a) {
            for (var g = 0; g < b.tourneyRounds[b.currentRoundIndex].length; g++) a(b.tourneyRounds[b.currentRoundIndex][g])
        };
        b.forEachRoundAndGame = function(a) {
            for (var g = 0; g < b.tourneyRounds.length; g++)
                for (var e = 0; e < b.tourneyRounds[g].length; e++) a(b.tourneyRounds[g][e], g, e)
        };
        b.goToNextRoundAndRandomizeScoresForUnfinishedMatches = function() {
            b.forEachCurrentGame(function(a) {
                null === a.getWinner() && a.randomizeResult()
            });
            b.tourneyRounds[b.currentRoundIndex];
            b.nextRound();
            b.save()
        };
        b.nextRound = function() {
            var a = 0,
                g = [];
            b.forEachCurrentGame(function(b) {
                b = b.getWinner();
                "undefined" === typeof g[Math.floor(a / 2)] && (g[Math.floor(a / 2)] = []);
                g[Math.floor(a / 2)][a % 2] = b;
                a++
            });
            b.currentRoundIndex++;
            if (!(2 < b.currentRoundIndex))
                for (var e = 0; e < g.length; e++) b.tourneyRounds[b.currentRoundIndex][e].setTeams(g[e])
        };
        b.clear = function() {
            Game.save.clear(b.playerPrefix + "activeTourney");
            Game.save.clear(b.playerPrefix + "selectedTeam");
            Game.save.clear(b.playerPrefix + "activeTeams");
            Game.save.clear(b.playerPrefix + "currentRoundIndex");
            Game.save.clear(b.playerPrefix + "selectedPlayers")
        };
        b.getCurrentGameIndexForSelectedTeam = function() {
            var a = 0,
                g = 0;
            b.forEachCurrentGame(function(e) {
                e =
                    e.getTeams();
                if (e[0].name === b.selectedTeam.name || e[1].name === b.selectedTeam.name) a = g;
                g++
            });
            return a
        };
        b.getCurrentGameForSelectedTeam = function() {
            var a = !1;
            b.forEachCurrentGame(function(g) {
                var e = g.getTeams();
                if (e[0].name === b.selectedTeam.name || e[1].name === b.selectedTeam.name) a = g
            });
            if (!1 !== a) return a;
            util.Debug.log(b.selectedTeam, "not found in current round.");
            return null
        };
        b.fillUpRandomly = function() {
            for (var a = 0; a < b.tourneyRounds[0].length; a++)
                if (null === b.tourneyRounds[0][a].getTeams()) {
                    var g = b.getRandomUnPickedTeam();
                    b.activeTeams.push(g.name);
                    var e = b.getRandomUnPickedTeam();
                    b.activeTeams.push(e.name);
                    b.setTeamsForRound(0, a, [g, e])
                }
        };
        b.getTeamData = function() {
            return null !== b.teamData ? b.teamData : b.teamData = Game.game.cache.getJSON("teamdata").teams
        };
        b.getRandomUnPickedTeam = function() {
            for (var a = Math.floor(Math.random() * b.getTotalTeams()), g = b.getTeamByIndex(a), e = 0; - 1 !== b.activeTeams.indexOf(g.name);) {
                a++;
                if (a >= b.getTotalTeams() && (a = 0, e++, 3 < e)) break;
                g = b.getTeamByIndex(a)
            }
            return g
        };
        b.getRandomTeam = function() {
            var a = Math.floor(Math.random() *
                b.getTotalTeams());
            return b.getTeamByIndex(a)
        };
        b.getTotalTeams = function() {
            return b.totalTeams ? b.totalTeams : b.totalTeams = Object.keys(b.getTeamData()).length
        };
        b.getTeamByIndex = function(a) {
            var g = 0,
                e;
            for (e in b.getTeamData()) {
                if (a === g) return b.getTeamData()[e];
                g++
            }
            return null
        };
        b.getTeamByKey = function(a) {
            return b.getTeamData()[a]
        };
        b.setTeamsForRound = function(a, g, e) {
            b.tourneyRounds[a][g].setTeams(e);
            b.save()
        };
        b.getGamesForRound = function(a) {
            return b.tourneyRounds[a]
        };
        b.setScoreForRoundAndGame = function(a,
            g, e, c) {
            b.tourneyRounds[a][g].setScore(e, c);
            b.save()
        };
        b.save = function() {
            Game.save.save(b.playerPrefix + "activeTourney", b.tourneyRounds);
            Game.save.save(b.playerPrefix + "selectedTeam", b.selectedTeam);
            Game.save.save(b.playerPrefix + "activeTeams", b.activeTeams);
            Game.save.save(b.playerPrefix + "currentRoundIndex", b.currentRoundIndex);
            Game.save.save(b.playerPrefix + "selectedPlayers", b.selectedPlayers)
        };
        b.tourneyRounds = null;
        b.selectedPlayers = null;
        b.activeTeams = [];
        b.teamData = null;
        b.totalTeams = null;
        b.currentRoundIndex =
            0;
        b.playerPrefix = "solo";
        b.playerModePrefixes = {
            solo: "solo",
            coop: "coop"
        };
        return b
    }();
    c.TourneyHandler = d
})(logic || (logic = {}));
(function(c) {
    var d = function(b) {
        function a() {
            b.apply(this, arguments)
        }
        __extends(a, b);
        a.prototype.create = function() {
            util.Sound.playMusic("music");
            this._setupLayers();
            this._createBackground();
            this._createPokiLogo();
            this._createSoundButtons()
        };
        a.prototype._createBackground = function() {
            this._uiBackdrop = new ui.ArenaBackground;
            this.farBackLayer.add(this._uiBackdrop);
            this._uiBackground = Game.game.add.sprite(.5 * Game.dimensions.width, .5 * Game.dimensions.height, "ui", "ui-holder");
            this.backLayer.add(this._uiBackground);
            this._uiBackground.anchor.set(.5, .5);
            this._uiBackground.x = .5 * Game.dimensions.width
        };
        a.prototype._createPokiLogo = function() {
            var a = Game.game.add.sprite(0, 0, "preroll", "poki-logo-small");
            a.anchor.set(.5, .5);
            a.position.set(this._uiBackground.left + Game.scale(250) + .5 * a.width, this._uiBackground.top + Game.scale(200) + .5 * a.height);
            a.inputEnabled = !0;
            a.input.useHandCursor = !0;
            a.events.onInputOver.add(function() {
                1 == a.scale.x && a.scale.setTo(1.1, 1.1)
            });
            a.events.onInputOut.add(function() {
                a.scale.setTo(1, 1)
            });
            a.events.onInputDown.add(function() {
                Game.analytics.event("Button",
                    "PokiMenu", "clicked");
                Game.openUrl("http://poki.com")
            }, this)
        };
        a.prototype._createMenuTitle = function(a, b) {
            void 0 === b && (b = Game.scale(140));
            var c = Game.game.add.sprite(.5 * Game.dimensions.width, .5 * b, "ui", "menu-header");
            c.anchor.set(.5, .15);
            var d = Game.game.add.bitmapText(.5 * Game.dimensions.width, .3 * b, "normal", a.toUpperCase().charAt(0) + a.toLocaleLowerCase().substring(1), b);
            d.anchor.set(.5, 0);
            d.align = "center";
            this.midLayer.addMultiple([c, d])
        };
        a.prototype._createSoundButtons = function() {
            var a = new ui.SoundButtons;
            a.position.set(this._uiBackground.right - Game.scale(400), this._uiBackground.top + Game.scale(200));
            this.midLayer.add(a)
        };
        a.prototype._createBackButton = function(a, b) {
            void 0 === a && (a = "ModeSelectState");
            void 0 === b && (b = null);
            this._backButton = new ui.RoundButton(Game.game.add.sprite(0, 0, "icons", "icon-back"), function() {
                null !== b && b();
                Game.game.state.start(a)
            });
            this._backButton.position.set(this._uiBackground.left + .5 * this._backButton.width + Game.scale(200), this._uiBackground.bottom - .5 * this._backButton.height - Game.scale(200));
            this.midLayer.add(this._backButton)
        };
        a.prototype._drawPlayerIconsAtPositions = function(a, b) {
            void 0 === b && (b = "HA");
            var c = [],
                d = Game.scale(220);
            3 > b.length ? (c.push(Game.game.add.sprite(a.x - d, a.y + .5 * d, "ui", "H" == b[0] ? "icon-player" : "icon-computer")), c.push(Game.game.add.sprite(a.x + d, a.y + .5 * d, "ui", "H" == b[1] ? "icon-player" : "icon-computer")), c[1].scale.x *= -1) : (c.push(Game.game.add.sprite(a.x - d, a.y + .5 * d, "ui", "H" == b[0] ? "icon-player" : "icon-computer")), c.push(Game.game.add.sprite(a.x - .4 * d, a.y + .5 * d, "ui", "H" == b[1] ?
                "icon-player" : "icon-computer")), c.push(Game.game.add.sprite(a.x + .4 * d, a.y + .5 * d, "ui", "H" == b[2] ? "icon-player" : "icon-computer")), c.push(Game.game.add.sprite(a.x + d, a.y + .5 * d, "ui", "H" == b[3] ? "icon-player" : "icon-computer")), c[2].scale.x *= -1, c[3].scale.x *= -1);
            c.forEach(function(a) {
                a.anchor.set(.5, 0);
                a.scale.set(.45 * a.scale.x, .45 * a.scale.y)
            });
            this.midLayer.addMultiple(c)
        };
        a.prototype._createConfirmButton = function(a, b) {
            this._confirmButton = new ui.Button(new Phaser.Point(0, 0), a, "normal", Game.scale(100));
            this._confirmButton.position.set(this._uiBackground.right -
                .5 * this._confirmButton.width - Game.scale(200), this._uiBackground.bottom - .5 * this._confirmButton.height - Game.scale(200));
            this._confirmButton.onClick(b)
        };
        a.prototype._enablePhysics = function() {
            Game.game.physics.startSystem(Phaser.Physics.P2JS);
            Game.game.physics.p2.gravity.y = Game.scale(1600);
            Game.game.physics.p2.world.defaultContactMaterial.friction = .3;
            Game.game.physics.p2.world.setGlobalStiffness(1E5);
            Game.game.physics.p2.setImpactEvents(!0)
        };
        return a
    }(c.BaseState);
    c.BaseMenuState = d
})(states || (states = {}));
(function(c) {
    var d = logic.GameplaySettings,
        b = function(a) {
            function b() {
                a.apply(this, arguments)
            }
            __extends(b, a);
            b.prototype.create = function() {
                a.prototype.create.call(this);
                Game.analytics.pageview("CoopNormalState");
                this._enablePhysics();
                this._createMenuTitle("co-op\nnormal");
                var b = new ui.TeamAndDoublePlayerSelector("players"),
                    g = new ui.TeamAndDoublePlayerSelector("computer", !0);
                g.randomize();
                util.PositionHelper.centerHorizontally([b, g], Game.scale(100));
                util.PositionHelper.centerVertically([b]);
                g.y = b.y;
                this._createBackButton("NormalModeState");
                this._createConfirmButton("play", function() {
                    Game.game.state.start("GameState", !0, !1, "Solo Normal", new d([1, 0], [2, 3], g.getAILevels(), [b.selectedPlayers[1]["sprite-key"], b.selectedPlayers[0]["sprite-key"], g.selectedPlayers[0]["sprite-key"], g.selectedPlayers[1]["sprite-key"]], b.switched ? [1, 0] : [0, 1], !0, function() {
                        Game.game.state.start("CoopNormalState")
                    }))
                })
            };
            b.prototype.update = function() {
                a.prototype.update.call(this)
            };
            return b
        }(c.BaseMenuState);
    c.CoopNormalState =
        b
})(states || (states = {}));
Game.addState("CoopNormalState", states.CoopNormalState);
(function(c) {
    var d = function(b) {
        function a() {
            b.apply(this, arguments)
        }
        __extends(a, b);
        a.prototype.create = function() {
            b.prototype.create.call(this);
            Game.analytics.pageview("CoopTournamentState");
            this._enablePhysics();
            this._createMenuTitle("co-op\ntournament");
            var a = new ui.TeamAndDoublePlayerSelector("players", !1, 0, 1, !0, [0, 2]);
            util.PositionHelper.centerHorizontally([a]);
            util.PositionHelper.centerVertically([a]);
            a.randomize();
            this._createBackButton("TournamentModeState");
            this._createConfirmButton("play",
                function() {
                    logic.TourneyHandler.createNewTourney(a.selectedTeam, a.selectedPlayers, 8);
                    Game.game.state.start("TourneyState", !0, !1, !1, !0)
                })
        };
        a.prototype.update = function() {
            b.prototype.update.call(this)
        };
        return a
    }(c.BaseMenuState);
    c.CoopTournamentState = d
})(states || (states = {}));
Game.addState("CoopTournamentState", states.CoopTournamentState);
(function(c) {
    var d = function(b) {
        function a() {
            b.apply(this, arguments)
        }
        __extends(a, b);
        a.prototype.create = function() {};
        a.prototype.init = function(a, b) {
            util.Sound.stopMusic("music");
            util.Sound.playFx("crowd-loop", !0);
            Game.analytics.pageview("GameState");
            this._resetCameraAndBounds();
            Game.effects.reset();
            Game.game.time.events.loop(1E4, Game.playTest.screenshot, Game.playTest);
            Game.effects.prepare();
            this._setupLayers();
            Game.analytics.event("Gamesettings", "mode", a);
            Game.analytics.event("Gamesettings", "players",
                b.humanControlledPlayers.length + "");
            this.gameplayHandler = new logic.GameplayHandler(b);
            this.gameplayHandler.kickoff()
        };
        a.prototype.update = function() {
            util.Sound.stopMusic("music");
            b.prototype.update.call(this);
            this.gameplayHandler.update()
        };
        a.prototype.render = function() {
            b.prototype.render.call(this)
        };
        a.prototype.shutdown = function() {
            util.Sound.playFx("crowd-loop", !1)
        };
        return a
    }(c.BaseState);
    c.GameState = d
})(states || (states = {}));
Game.addState("GameState", states.GameState);
(function(c) {
    var d = function(b) {
        function a() {
            b.apply(this, arguments)
        }
        __extends(a, b);
        a.prototype.create = function() {
            b.prototype.create.call(this);
            Game.analytics.pageview("ModeSelectState");
            this._createMenuTitle("select\nmode");
            var a = new ui.Button(new Phaser.Point(.5 * Game.dimensions.width, .5 * Game.dimensions.height), "tournament", "normal", Game.scale(130), "green", Game.scale(50));
            a.onClick(function() {
                Game.game.device.desktop ? Game.game.state.start("TournamentModeState") : Game.game.state.start("SoloTournamentState")
            });
            var e = new ui.Button(new Phaser.Point(.5 * Game.dimensions.width, .7 * Game.dimensions.height), "party", "normal", Game.scale(130), "green", Game.scale(50));
            e.onClick(function() {
                Game.game.device.desktop ? Game.game.state.start("NormalModeState") : Game.game.state.start("SoloNormalState")
            });
            e.scale.set(.8, .8);
            e = Game.game.add.sprite(a.x - .8 * a.width, e.y, "ui", "button-ball");
            e.anchor.set(.5, .5);
            e.scale.set(.7, .7);
            a = Game.game.add.sprite(a.x - .8 * a.width, a.y, "ui", "button-prize");
            a.anchor.set(.5, .5);
            a.scale.set(.7, .7)
        };
        a.prototype.update =
            function() {
                b.prototype.update.call(this)
            };
        return a
    }(c.BaseMenuState);
    c.ModeSelectState = d
})(states || (states = {}));
Game.addState("ModeSelectState", states.ModeSelectState);
(function(c) {
    var d = function(b) {
        function a() {
            b.apply(this, arguments)
        }
        __extends(a, b);
        a.prototype.create = function() {
            b.prototype.create.call(this);
            Game.analytics.pageview("NormalModeState");
            this._createMenuTitle("NORMAL\nMODE");
            var a = new ui.Button(new Phaser.Point(0, .35 * Game.dimensions.height), "solo", "normal", Game.scale(100), "green", Game.scale(50));
            a.onClick(function() {
                Game.game.state.start("SoloNormalState")
            });
            var e = new ui.Button(new Phaser.Point(0, .35 * Game.dimensions.height), "2 vs 2\nco-op", "normal",
                Game.scale(100), "green", Game.scale(50));
            e.onClick(function() {
                Game.game.state.start("CoopNormalState")
            });
            var c = new ui.Button(new Phaser.Point(0, .7 * Game.dimensions.height), "1 vs 1", "normal", Game.scale(100), "green", Game.scale(50));
            c.onClick(function() {
                Game.game.state.start("VersusNormalState")
            });
            var d = new ui.Button(new Phaser.Point(0, .7 * Game.dimensions.height), "2 vs 2", "normal", Game.scale(100), "green", Game.scale(50));
            d.onClick(function() {
                Game.game.state.start("TeamVersusNormalState")
            });
            util.PositionHelper.centerHorizontally([a,
                e
            ], Game.scale(400));
            util.PositionHelper.centerHorizontally([c, d], Game.scale(400));
            this.midLayer.addMultiple([c, d, a, e]);
            this._drawPlayerIconsAtPositions(a.position, "HA");
            this._drawPlayerIconsAtPositions(e.position, "HHAA");
            this._drawPlayerIconsAtPositions(c.position, "HH");
            this._drawPlayerIconsAtPositions(d.position, "HHHH");
            this._createBackButton()
        };
        a.prototype.update = function() {
            b.prototype.update.call(this)
        };
        return a
    }(c.BaseMenuState);
    c.NormalModeState = d
})(states || (states = {}));
Game.addState("NormalModeState", states.NormalModeState);
(function(c) {
    var d = function(b) {
        function a() {
            var a = this;
            b.apply(this, arguments);
            this._startTime = 0;
            this._loaders = [
                function() {
                    a._loaderPercentageAllocation = 100;
                    var b = Game.game.cache.getJSON("images"),
                        c;
                    for (c in b[util.Scale.assetType].sheets) {
                        var d = b[util.Scale.assetType].sheets[c],
                            h = d.split("/").splice(3).join("/");
                        "preroll" != h && (Game.game.load.atlasJSONHash(h, d + ".png", d + ".json"), util.Cleaner.cleanupCache("JSON", h))
                    }
                    for (c in b[util.Scale.assetType].images) d = b[util.Scale.assetType].images[c], h = d.split("/").splice(3).join("/"),
                        Game.game.load.image(h, d + ".png");
                    util.Cleaner.addToCacheCleanupQueue("JSON", "images");
                    b = "ball-hit-grass ball-hit-wood ball-hit-metal ball-kick-normal ball-kick-hard ball-kick-hardest button countdown crowd-goal crowd-loop player-jump player-kick whistle-halftime whistle-start".split(" ");
                    for (c in b) Game.game.load.audio(b[c], ["assets/audio/" + b[c] + ".wav"]);
                    b = ["music"];
                    for (c in b) Game.game.load.audio(b[c], ["assets/audio/" + b[c] + ".mp3"]);
                    var m = {
                        icons: Game.scale(0),
                        normal: Game.scale(0),
                        "digital-time": Game.scale(0),
                        "digital-time-tourney": Game.scale(0)
                    };
                    Game.game.load.json("teamdata", "assets/data/teamdata.json");
                    Object.keys(m).forEach(function(a) {
                        Game.game.load.bitmapFont(a, "assets/bitmapfonts/" + util.Scale.assetType + "/" + a + ".png", "assets/bitmapfonts/" + util.Scale.assetType + "/" + a + ".fnt", null, m[a])
                    })
                }
            ]
        }
        __extends(a, b);
        a.prototype.preload = function() {
            Game.analytics.pageview("PreloadState");
            this._startTime = Date.now();
            this._ui = new ui.LoadUI;
            util.Cleaner.addToDestroyQueue(this._ui);
            var a = 0;
            Game.game.load.onFileComplete.add(function(b,
                c, d, h, m) {
                b = h / m * this._loaderPercentageAllocation - a;
                a += b;
                this._ui.updateProgressBar(b);
                h == m && (a = 0, this._loadNext())
            }, this);
            this._loadNext();
            Game.save.load("musicMuted") && util.Sound.muteMusic();
            Game.save.load("soundMuted") && util.Sound.muteSounds()
        };
        a.prototype._loadNext = function() {
            0 < this._loaders.length ? this._loaders.shift()() : this._done()
        };
        a.prototype.shutdown = function() {
            util.Cleaner.cleanupAll()
        };
        a.prototype._done = function() {
            Game.analytics.event("LoadTimes", "Preload", "Time", Date.now() - this._startTime);
            util.Debug.log("Preload finished in " + (Date.now() - this._startTime) / 1E3 + " seconds");
            Game.game.state.start("SplashState")
        };
        return a
    }(c.BaseState);
    c.PreloadState = d
})(states || (states = {}));
Game.addState("PreloadState", states.PreloadState);
(function(c) {
    var d = logic.GameplaySettings,
        b = function(a) {
            function b() {
                a.apply(this, arguments)
            }
            __extends(b, a);
            b.prototype.create = function() {
                a.prototype.create.call(this);
                Game.analytics.pageview("SoloNormalState");
                this._enablePhysics();
                this._createMenuTitle("solo\nnormal");
                var b = new ui.TeamAndSinglePlayerSelector("player"),
                    g = new ui.TeamAndSinglePlayerSelector("computer", !0);
                b.randomize();
                g.randomize();
                util.PositionHelper.centerHorizontally([b, g], Game.scale(100));
                util.PositionHelper.centerVertically([b]);
                g.y = b.y;
                Game.game.device.desktop ? this._createBackButton("NormalModeState") : this._createBackButton("ModeSelectState");
                this._createConfirmButton("play", function() {
                    Game.game.state.start("GameState", !0, !1, "Solo Normal", new d([0], [1], [g.getAILevel()], [b.selectedPlayer["sprite-key"], g.selectedPlayer["sprite-key"]], [b.controlIndex], !0, function() {
                        Game.game.state.start("SoloNormalState")
                    }))
                })
            };
            b.prototype.update = function() {
                a.prototype.update.call(this)
            };
            return b
        }(c.BaseMenuState);
    c.SoloNormalState = b
})(states ||
    (states = {}));
Game.addState("SoloNormalState", states.SoloNormalState);
(function(c) {
    var d = function(b) {
        function a() {
            b.apply(this, arguments)
        }
        __extends(a, b);
        a.prototype.create = function() {
            b.prototype.create.call(this);
            Game.analytics.pageview("SoloTournamentState");
            this._enablePhysics();
            this._createMenuTitle("solo\ntournament");
            var a = new ui.TeamAndSinglePlayerSelector("player", !1, 0, !0);
            a.randomize();
            util.PositionHelper.centerHorizontally([a]);
            util.PositionHelper.centerVertically([a]);
            Game.game.device.desktop ? this._createBackButton("TournamentModeState") : this._createBackButton("ModeSelectState");
            this._createConfirmButton("play", function() {
                logic.TourneyHandler.createNewTourney(a.selectedTeam, [a.selectedPlayer], 8);
                Game.game.state.start("TourneyState", !0, !1, !1, !1)
            })
        };
        a.prototype.update = function() {
            b.prototype.update.call(this)
        };
        return a
    }(c.BaseMenuState);
    c.SoloTournamentState = d
})(states || (states = {}));
Game.addState("SoloTournamentState", states.SoloTournamentState);
(function(c) {
    var d = function(b) {
        function a() {
            b.apply(this, arguments)
        }
        __extends(a, b);
        a.prototype.create = function() {
            Game.analytics.pageview("SplashState");
            util.Sound.playMusic("music");
            this.uiLayer = Game.game.add.group();
            this._initUI()
        };
        a.prototype._initUI = function() {
            this.uiLayer.add(new Phaser.Sprite(Game.game, Game.dimensions.width / 2, Game.dimensions.height / 2, "ui", "splash-bg")).anchor.setTo(.5, .5);
            var a = this.uiLayer.add(new Phaser.Sprite(Game.game, Game.dimensions.width / 2, 0, "preroll", "logo"));
            a.anchor.x =
                .5;
            var b = new ui.Button(new Phaser.Point(Game.dimensions.width / 2, 0), "play", "normal", Game.scale(100));
            util.PositionHelper.centerVertically([a, b], Game.scale(100));
            b.onClick(function() {
                Game.game.state.start("ModeSelectState")
            })
        };
        return a
    }(c.BaseState);
    c.SplashState = d
})(states || (states = {}));
Game.addState("SplashState", states.SplashState);
(function(c) {
    var d = logic.GameplaySettings,
        b = function(a) {
            function b() {
                a.apply(this, arguments)
            }
            __extends(b, a);
            b.prototype.create = function() {
                a.prototype.create.call(this);
                Game.analytics.pageview("TeamVersusNormalState");
                this._enablePhysics();
                this._createMenuTitle("co-op\nnormal");
                var b = new ui.TeamAndDoublePlayerSelector("team 1"),
                    g = new ui.TeamAndDoublePlayerSelector("team 2", !1, 2);
                b.randomize();
                g.randomize();
                util.PositionHelper.centerHorizontally([b, g], Game.scale(100));
                util.PositionHelper.centerVertically([b]);
                g.y = b.y;
                this._createBackButton("NormalModeState");
                this._createConfirmButton("play", function() {
                    var a = [],
                        a = a.concat(b.switched ? [1, 0] : [0, 1]),
                        a = a.concat(g.switched ? [3, 2] : [2, 3]);
                    Game.game.state.start("GameState", !0, !1, "Solo Normal", new d([1, 0, 3, 2], [], [], [b.selectedPlayers[1]["sprite-key"], b.selectedPlayers[0]["sprite-key"], g.selectedPlayers[1]["sprite-key"], g.selectedPlayers[0]["sprite-key"]], a, !0, function() {
                        Game.game.state.start("TeamVersusNormalState")
                    }))
                })
            };
            b.prototype.update = function() {
                a.prototype.update.call(this)
            };
            return b
        }(c.BaseMenuState);
    c.TeamVersusNormalState = b
})(states || (states = {}));
Game.addState("TeamVersusNormalState", states.TeamVersusNormalState);
(function(c) {
    var d = function(b) {
        function a() {
            b.apply(this, arguments)
        }
        __extends(a, b);
        a.prototype.create = function() {
            var a = this;
            b.prototype.create.call(this);
            Game.analytics.pageview("TournamentModeState");
            this._createMenuTitle("TOURNAMENT\nMODE");
            var e = new ui.Button(new Phaser.Point(0, .5 * Game.dimensions.height), "solo", "normal", Game.scale(100), "green", Game.scale(50));
            e.onClick(function() {
                logic.TourneyHandler.playerPrefix = "solo";
                a._checkPreviousTournament(function(a) {
                    a ? Game.game.state.start("TourneyState", !0, !1, !0, !1) : (logic.TourneyHandler.clear(), Game.game.state.start("SoloTournamentState"))
                })
            });
            var c = new ui.Button(new Phaser.Point(0, .5 * Game.dimensions.height), "2vs2\nco-op", "normal", Game.scale(100), "green", Game.scale(50));
            c.onClick(function() {
                logic.TourneyHandler.playerPrefix = "coop";
                a._checkPreviousTournament(function(a) {
                    a ? Game.game.state.start("TourneyState", !0, !1, !0, !0) : (logic.TourneyHandler.clear(), Game.game.state.start("CoopTournamentState"))
                })
            });
            this.midLayer.addMultiple([e, c]);
            util.PositionHelper.centerHorizontally([e,
                c
            ], Game.scale(200));
            this._drawPlayerIconsAtPositions(e.position, "HA");
            this._drawPlayerIconsAtPositions(c.position, "HHAA");
            this._createBackButton()
        };
        a.prototype.update = function() {
            b.prototype.update.call(this)
        };
        a.prototype._checkPreviousTournament = function(a) {
            logic.TourneyHandler.hasActiveTourney() ? new ui.QuestionDisplay("Continue with previous tournament?", function() {
                a(!0)
            }, function() {
                a(!1)
            }, "Yes, continue", "No, start a new one", !0) : a(!1)
        };
        return a
    }(c.BaseMenuState);
    c.TournamentModeState = d
})(states ||
    (states = {}));
Game.addState("TournamentModeState", states.TournamentModeState);
(function(c) {
    var d = function(b) {
        function a() {
            b.apply(this, arguments);
            this._screenShakeEnabled = !1;
            this._maxShake = 30
        }
        __extends(a, b);
        a.prototype.create = function() {};
        a.prototype.init = function(a, e) {
            void 0 === a && (a = !0);
            void 0 === e && (e = !1);
            b.prototype.create.call(this);
            Game.analytics.pageview("TournamentState");
            if (3 > logic.TourneyHandler.currentRoundIndex) this._createMenuTitle("tournament\nround " + (logic.TourneyHandler.currentRoundIndex + 1));
            else {
                var c = ["congratulations!", "awesome!", "winner winner\n chicken dinner!",
                    "waaahaaahoooooww!"
                ];
                this._createMenuTitle(c[Math.floor(c.length * Math.random())])
            }
            3 > logic.TourneyHandler.currentRoundIndex ? (this._createNextRoundButtonAndBindings(e), this._createBackButton("TournamentModeState"), this._createTourneyUI()) : (logic.TourneyHandler.currentRoundIndex = 2, this._createTourneyUI(), this._createBackButton("TournamentModeState", function() {
                logic.TourneyHandler.clear()
            }), this._winnerCelebration())
        };
        a.prototype._winnerCelebration = function() {
            var a = this;
            this._tourneyUI.doTeamLogoAnimation(logic.TourneyHandler.selectedTeam);
            this._screenShakeEnabled = !0;
            setTimeout(function() {
                a._screenShakeEnabled = !1;
                Game.game.world.setBounds(0, 0, Game.dimensions.width, Game.dimensions.height)
            }, 1E3)
        };
        a.prototype._createTourneyUI = function() {
            this._tourneyUI = new ui.TourneyUI;
            this._tourneyUI.scale.set(.6, .6);
            this._tourneyUI.x += .2 * Game.dimensions.width;
            this._tourneyUI.y += .3 * Game.dimensions.height
        };
        a.prototype._createNextRoundButtonAndBindings = function(a) {
            void 0 === a && (a = !1);
            var b = 1;
            switch (logic.TourneyHandler.currentRoundIndex) {
                case 1:
                    b = 6;
                    break;
                case 2:
                    b = 10
            }
            var c, d, h, m = [],
                k, n = logic.TourneyHandler.getCurrentGameForSelectedTeam().getTeams();
            if (a) {
                c = [0, 1];
                d = [2, 3];
                h = [b, b];
                m.push(logic.TourneyHandler.selectedPlayers[0]["sprite-key"]);
                m.push(logic.TourneyHandler.selectedPlayers[1]["sprite-key"]);
                for (q in n[1].players) m.push(q);
                k = [0, 2]
            } else {
                var p = logic.TourneyHandler.selectedPlayers[0]["sprite-key"];
                null === p && (p = logic.TourneyHandler.selectedPlayers[1]["sprite-key"]);
                c = [0];
                d = [1];
                h = [b];
                m.push(p);
                for (var q in n[1].players) {
                    m.push(q);
                    break
                }
                k = [0]
            }
            this._createConfirmButton("play",
                function() {
                    var b = new logic.GameplaySettings(c, d, h, m, k, !1, function(b) {
                        b[0] > b[1] ? (logic.TourneyHandler.setScoreForRoundAndGame(logic.TourneyHandler.currentRoundIndex, logic.TourneyHandler.getCurrentGameIndexForSelectedTeam(), b, !0), logic.TourneyHandler.goToNextRoundAndRandomizeScoresForUnfinishedMatches(), Game.game.state.start("TourneyState", !0, !1, !0, a)) : new ui.QuestionDisplay("retry?", function() {
                            Game.state.gameplayHandler.rematch()
                        }, function() {
                            Game.game.state.start("SplashState")
                        })
                    });
                    Game.game.state.start("GameState", !0, !1, "Single Tournament", b)
                })
        };
        a.prototype._doPotentialScreenShake = function() {
            if (this._screenShakeEnabled) {
                var a = new Phaser.Point(Math.ceil(2 * (Math.random() - .5) * this._maxShake), Math.ceil(2 * (Math.random() - .5) * this._maxShake));
                Game.game.world.setBounds(a.x, a.y, Game.dimensions.width, Game.dimensions.height)
            }
        };
        a.prototype.update = function() {
            b.prototype.update.call(this);
            this._doPotentialScreenShake()
        };
        a.prototype.render = function() {
            b.prototype.render.call(this)
        };
        return a
    }(c.BaseMenuState);
    c.TourneyState =
        d
})(states || (states = {}));
Game.addState("TourneyState", states.TourneyState);
(function(c) {
    var d = logic.GameplaySettings,
        b = function(a) {
            function b() {
                a.apply(this, arguments)
            }
            __extends(b, a);
            b.prototype.create = function() {
                a.prototype.create.call(this);
                Game.analytics.pageview("VersusNormalState");
                this._enablePhysics();
                this._createMenuTitle("solo\nnormal");
                var b = new ui.TeamAndSinglePlayerSelector("player 1"),
                    c = new ui.TeamAndSinglePlayerSelector("player 2", !1, 2);
                c.randomize();
                b.randomize();
                util.PositionHelper.centerHorizontally([b, c], Game.scale(100));
                util.PositionHelper.centerVertically([b]);
                c.y = b.y;
                this._createBackButton("NormalModeState");
                this._createConfirmButton("play", function() {
                    Game.game.state.start("GameState", !0, !1, "Solo Normal", new d([0, 1], [], [], [b.selectedPlayer["sprite-key"], c.selectedPlayer["sprite-key"]], [b.controlIndex, c.controlIndex], !0, function() {
                        Game.game.state.start("VersusNormalState")
                    }))
                })
            };
            b.prototype.update = function() {
                a.prototype.update.call(this)
            };
            return b
        }(c.BaseMenuState);
    c.VersusNormalState = b
})(states || (states = {}));
Game.addState("VersusNormalState", states.VersusNormalState);
var ui;
(function(c) {
    var d = function(b) {
        function a() {
            b.call(this, Game.game);
            this._background = Game.game.add.tileSprite(Game.dimensions.width / 2, Game.dimensions.height / 2 - Game.scale(200), Game.dimensions.width, Game.dimensions.height, "level", "bg-back", Game.state.farBackLayer);
            this._background.anchor.set(.5, .5);
            this._backgroundTwo = Game.game.add.tileSprite(Game.dimensions.width / 2, Game.dimensions.height / 2 + Game.scale(200), Game.dimensions.width, Game.dimensions.height, "level", "bg-front", Game.state.farBackLayer);
            this._backgroundTwo.anchor.set(.5,
                .5);
            this._tribune = Game.game.add.sprite(.5 * Game.dimensions.width, .5 * Game.dimensions.height + Game.scale(150), "level", "tribune", Game.state.backLayer);
            this._tribune.anchor.set(.5, .5);
            this._field = Game.game.add.sprite(.5 * Game.dimensions.width, Game.dimensions.height + Game.scale(100), "level", "field", Game.state.backLayer);
            this._field.anchor.set(.5, 1);
            this.addMultiple([this._background, this._backgroundTwo, this._tribune, this._field])
        }
        __extends(a, b);
        a.prototype.update = function() {
            this._background.tilePosition.x++;
            this._backgroundTwo.tilePosition.x += .5
        };
        return a
    }(Phaser.Group);
    c.ArenaBackground = d
})(ui || (ui = {}));
(function(c) {
    var d = function(b) {
        function a(a, e, c, d, h, m) {
            var k = this;
            void 0 === h && (h = "green");
            void 0 === m && (m = Game.scale(10));
            b.call(this, Game.game);
            this._clickCallbacks = [];
            this._hoverCallbacks = [];
            this._downCallbacks = [];
            this._outCallbacks = [];
            this._contentOverridden = !1;
            "normal" === c && (e = e.toUpperCase().charAt(0) + e.toLocaleLowerCase().substring(1));
            this._padding = m;
            this._buttonId = h;
            this._buttonLeft = Game.game.add.sprite(0, 0, "ui", h + "-left");
            this._buttonLeft.anchor.set(1, .5);
            this.add(this._buttonLeft);
            this._buttonCenter =
                Game.game.add.tileSprite(0, 0, 1, this._buttonLeft.height, "ui", h + "-mid");
            this._buttonCenter.anchor.set(.5, .5);
            this.add(this._buttonCenter);
            this._buttonRight = Game.game.add.sprite(0, 0, "ui", h + "-right");
            this._buttonRight.anchor.set(0, .5);
            this.add(this._buttonRight);
            this._text = Game.game.add.bitmapText(0, 0, c, e, d);
            this._text.anchor.set(.5, .5);
            "normal" === c && this._text.anchor.set(.475, .6);
            this.add(this._text);
            this._button = Game.game.add.button(0, 0);
            this._button.anchor.set(.5, .5);
            this.add(this._button);
            this._button.onInputOver.add(function() {
                k._onHover()
            });
            this._button.onInputDown.add(function() {
                k._onDown()
            });
            this._button.onInputUp.add(function() {
                k._onClick()
            });
            this._button.onInputOut.add(function() {
                k._onOut()
            });
            this._setup();
            this.position = a.clone()
        }
        __extends(a, b);
        a.prototype._setup = function() {
            this._contentOverridden ? (this.overriddenContent.x = -this._overriddenContentWidth / 2 + Game.scale(80), this._buttonCenter.width = this._overriddenContentWidth + 2 * this._padding) : (this._text && "undefined" !== typeof this._text.width && (this._buttonCenter.width = Math.ceil(this._text.width +
                2 * this._padding)), this._text.x = 0);
            this._buttonLeft.x = Math.ceil(.5 * -this._buttonCenter.width) + 1;
            this._buttonRight.x = Math.ceil(.5 * this._buttonCenter.width) - 1;
            this._button.width = this.width;
            this._button.height = this.height
        };
        a.prototype._onOut = function() {
            this._setFrame();
            for (var a = 0; a < this._outCallbacks.length; a++) this._outCallbacks[a](this)
        };
        a.prototype._onClick = function(a) {
            void 0 === a && (a = !0);
            a && util.Sound.playFx("button");
            this._setFrame();
            for (a = 0; a < this._clickCallbacks.length; a++) this._clickCallbacks[a](this)
        };
        a.prototype._onHover = function() {
            this._setFrame("down");
            for (var a = 0; a < this._hoverCallbacks.length; a++) this._hoverCallbacks[a](this)
        };
        a.prototype._onDown = function() {
            for (var a = 0; a < this._downCallbacks.length; a++) this._downCallbacks[a](this)
        };
        a.prototype._setFrame = function(a) {
            this._buttonLeft.frameName = this._buttonId + (a ? "-" + a : "") + "-left";
            this._buttonCenter.frameName = this._buttonId + (a ? "-" + a : "") + "-mid";
            this._buttonRight.frameName = this._buttonId + (a ? "-" + a : "") + "-right"
        };
        a.prototype.clearClick = function() {
            this._clickCallbacks = []
        };
        a.prototype.clearHover = function() {
            this._hoverCallbacks = []
        };
        a.prototype.clearDown = function() {
            this._downCallbacks = []
        };
        a.prototype.clearOut = function() {
            this._outCallbacks = []
        };
        a.prototype.onClick = function(a) {
            this._clickCallbacks.push(a)
        };
        a.prototype.onHover = function(a) {
            this._hoverCallbacks.push(a)
        };
        a.prototype.onDown = function(a) {
            this._downCallbacks.push(a)
        };
        a.prototype.onOut = function(a) {
            this._outCallbacks.push(a)
        };
        a.prototype.click = function() {
            this._onClick(!1)
        };
        a.prototype.setText = function(a) {
            this._text.text =
                a.toUpperCase()
        };
        a.prototype.getText = function() {
            return this._text.text
        };
        a.prototype.overrideContents = function(a, b, c) {
            void 0 === c && (c = !1);
            c || (this._text.visible = !1);
            this.overriddenContent = a;
            this._overriddenContentWidth = b;
            this._contentOverridden = !0;
            this.add(this.overriddenContent);
            a.add(this._text);
            this.add(this._text);
            this._setup()
        };
        return a
    }(Phaser.Group);
    c.Button = d
})(ui || (ui = {}));
(function(c) {
    var d = function(b) {
        function a(a, c, f) {
            var d = this;
            void 0 === c && (c = !1);
            void 0 === f && (f = 0);
            b.call(this, Game.game);
            this._playerIndex = 0;
            this._aiLevel = 1;
            this._currentModifier = "easy";
            this._isAI = !1;
            this._scale = .3;
            this.position = a;
            this._isAI = c;
            this._aiGroup = Game.game.add.group();
            this._keyGroup = Game.game.add.group();
            this.addMultiple([this._aiGroup, this._keyGroup]);
            this._keyBackground = Game.game.add.sprite(0, 0, "ui", "player-buttons", this._keyGroup);
            this._keyBackground.anchor.set(.5, .5);
            this._aiDifficultyModifierButton =
                Game.game.add.sprite(0, 0, "ui", this._currentModifier + "-up");
            this._aiDifficultyModifierButton.anchor.set(.5, .5);
            this._aiDifficultyModifierButton.inputEnabled = !0;
            this._aiText = Game.game.add.bitmapText(0, 0, "normal", this._currentModifier.toUpperCase(), Game.scale(100));
            this._aiText.anchor.set(.49, .5);
            this._aiDifficultyModifierButton.events.onInputUp.add(function() {
                "easy" === d._currentModifier ? d._currentModifier = "medium" : "medium" === d._currentModifier ? d._currentModifier = "hard" : "hard" === d._currentModifier &&
                    (d._currentModifier = "easy");
                d._aiDifficultyModifierButton.frameName = d._currentModifier + "-up";
                d._aiText.text = d._currentModifier.toUpperCase()
            });
            this._aiDifficultyModifierButton.events.onInputOver.add(function() {
                Game.game.canvas.style.cursor = "pointer";
                d._aiDifficultyModifierButton.frameName = d._currentModifier + "-down"
            });
            this._aiDifficultyModifierButton.events.onInputOut.add(function() {
                Game.game.canvas.style.cursor = "default";
                d._aiDifficultyModifierButton.frameName = d._currentModifier + "-up"
            });
            this._aiGroup.addMultiple([this._aiDifficultyModifierButton,
                this._aiText
            ]);
            this.setControls(f, c);
            this._doPositioning()
        }
        __extends(a, b);
        a.prototype.getAILevel = function() {
            return logic.AIControls.AILevels[this._currentModifier]
        };
        a.prototype.disable = function() {
            this._hideAI();
            this._hidePlayerControls()
        };
        a.prototype._hideAI = function() {
            this._aiGroup.visible = !1
        };
        a.prototype._hidePlayerControls = function() {
            this._keyGroup.visible = !1
        };
        a.prototype._showPlayerControls = function() {
            this._keyGroup.visible = !0
        };
        a.prototype._showAI = function() {
            this._aiGroup.visible = !0
        };
        a.prototype.enable =
            function() {
                if (this._isAI) this._hidePlayerControls(), this._showAI();
                else {
                    this._hideAI();
                    var a = logic.InputList.getPlayerTextControlsForPlayer(this._playerIndex);
                    this._keyLeftText = this._destroyAndCreate(this._keyLeftText, a[0], this._keyGroup);
                    this._keyRightText = this._destroyAndCreate(this._keyRightText, a[1], this._keyGroup);
                    this._keyKickText = this._destroyAndCreate(this._keyKickText, a[2], this._keyGroup);
                    this._keyJumpText = this._destroyAndCreate(this._keyJumpText, a[3], this._keyGroup);
                    this._doPositioning();
                    this._showPlayerControls()
                }
            };
        a.prototype._destroyAndCreate = function(a, b, c) {
            a && a.destroy();
            if (-1 < ["left", "right", "up", "_"].indexOf(b)) {
                var d;
                "_" === b && (d = Game.game.add.sprite(0, 0, "icons", "icon-space", c), d.scale.set(this._scale, this._scale), d.visible = !1);
                "left" === b ? (d = Game.game.add.sprite(0, 0, "icons", "icon-back", c), d.scale.set(this._scale, this._scale)) : "right" == b ? (d = Game.game.add.sprite(0, 0, "icons", "icon-back", c), d.scale.set(-this._scale, this._scale)) : "up" == b && (d = Game.game.add.sprite(0, 0, "icons", "icon-back",
                    c), d.anchor.set(0, 1), d.angle = 90, d.scale.set(this._scale, this._scale));
                this._keyBackground.frameName = "player-buttons-space";
                return d
            }
            this._keyBackground.frameName = "player-buttons";
            a = Game.game.add.bitmapText(0, 0, "normal", b.toUpperCase(), Game.scale(70));
            c.add(a);
            return a
        };
        a.prototype.setPosition = function(a) {
            this.position = a;
            this._doPositioning()
        };
        a.prototype._doPositioning = function() {
            var a = Game.scale(120);
            if (!this.isAI()) {
                this._keyBackground.position.set(0, 0);
                var b = new Phaser.Point(0, 0 - Game.scale(70));
                this._keyLeftText.anchor.set(.5, .5);
                this._keyLeftText.position.set(b.x - a, b.y + a);
                this._keyRightText.anchor.set(.5, .5);
                this._keyRightText.position.set(b.x + a, b.y + a);
                this._keyJumpText.anchor.set(.5, .5);
                this._keyJumpText.position.set(b.x, b.y);
                this._keyKickText.anchor.set(.5, .5);
                this._keyKickText.position.set(b.x, b.y + a)
            }
            this._aiText.position.set(0, 0)
        };
        a.prototype.isAI = function() {
            return this._isAI
        };
        a.prototype.setControls = function(a, b) {
            void 0 === b && (b = !1);
            (this._isAI = b) ? this._aiLevel = a: this._playerIndex =
                a;
            this.enable()
        };
        a.prototype.getControls = function() {
            return [this._isAI ? "A" : "H", this._isAI ? this._aiLevel : this._playerIndex]
        };
        return a
    }(Phaser.Group);
    c.ControlsIndicator = d
})(ui || (ui = {}));
(function(c) {
    var d = function(b) {
        function a() {
            b.call(this, Game.game);
            this._flashyText = Game.game.add.bitmapText(Game.dimensions.width / 2, Game.dimensions.height / 2, "normal", "", Game.scale(150));
            this._flashyText.align = "center";
            this._flashyText.anchor.set(.5, .5);
            this._flashyText.scale.set(.2, .2);
            this._flashyText.alpha = 0;
            this.add(this._flashyText)
        }
        __extends(a, b);
        a.prototype.flashText = function(a, b, c) {
            var d = this;
            void 0 === b && (b = !1);
            this._flashyText.text = a.toUpperCase().charAt(0) + a.toLocaleLowerCase().substring(1);
            Game.game.add.tween(this._flashyText).to({
                alpha: 1
            }, 500, Phaser.Easing.Quadratic.Out, !0);
            a = Game.game.add.tween(this._flashyText.scale).to({
                x: 1.1,
                y: 1.1
            }, 500, Phaser.Easing.Quadratic.Out, !0);
            c && a.onComplete.add(c);
            c = function() {
                Game.game.add.tween(d._flashyText).to({
                    alpha: 0
                }, 500, Phaser.Easing.Quadratic.Out, !0);
                Game.game.add.tween(d._flashyText.scale).to({
                    x: .2,
                    y: .2
                }, 500, Phaser.Easing.Quadratic.Out, !0)
            };
            if (b) return c;
            setTimeout(c, 1500)
        };
        return a
    }(Phaser.Group);
    c.FlashText = d
})(ui || (ui = {}));
(function(c) {
    var d = function() {
        function b() {
            this._timerDigits = [];
            this._seperatorString = "   -   ";
            for (var a = Game.scale(123), b = Game.scale(85), c = Game.scale(45), d = Game.dimensions.height / 2 - Game.scale(730), a = [new Phaser.Point(c + Game.dimensions.width / 2 - b - a, d), new Phaser.Point(c + Game.dimensions.width / 2 - b, d), new Phaser.Point(c + Game.dimensions.width / 2 + b, d), new Phaser.Point(c + Game.dimensions.width / 2 + b + a, d)], b = 0; 4 > b; b++) c = Game.game.add.bitmapText(a[b].x, a[b].y, "digital-time", "0", Game.scale(190)), c.align = "right",
                c.anchor.set(1, .5), Game.state.midLayer.add(c), this._timerDigits.push(c);
            this._scoreBasePosition = new Phaser.Point(Game.dimensions.width / 2, Game.dimensions.height - Game.scale(115));
            this._goalFlashBehind = Game.game.add.sprite(Game.dimensions.width / 2, Game.dimensions.height / 2, "effects", "goal", Game.state.backLayer);
            this._goalFlashBehind.anchor.set(.5, .5);
            this._goalFlashBehind.alpha = 0;
            this._goalFlashFront = Game.game.add.sprite(Game.dimensions.width / 2, Game.dimensions.height / 2, "effects", "goal", Game.state.frontLayer);
            this._goalFlashFront.anchor.set(.5, .5);
            this._goalFlashFront.alpha = 0;
            this._scoreBackground = Game.game.add.sprite(this._scoreBasePosition.x, this._scoreBasePosition.y - Game.scale(10), "ui", "score", Game.state.midLayer);
            this._scoreBackground.anchor.set(.5, .5);
            this._scoreBallLeft = Game.game.add.sprite(this._scoreBasePosition.x - Game.scale(385), this._scoreBasePosition.y - Game.scale(12), "ui", "ball", Game.state.midLayer);
            this._scoreBallLeft.anchor.set(.5, .5);
            this._scoreBallLeft.scale.set(.6, .6);
            this._matchHistoryLeft =
                Game.game.add.bitmapText(this._scoreBallLeft.x + Game.scale(45), this._scoreBasePosition.y - Game.scale(22), "normal", "0", Game.scale(60));
            this._matchHistoryLeft.anchor.set(0, .5);
            Game.state.midLayer.add(this._matchHistoryLeft);
            this._scoreBallRight = Game.game.add.sprite(this._scoreBasePosition.x + Game.scale(385), this._scoreBasePosition.y - Game.scale(12), "ui", "ball", Game.state.midLayer);
            this._scoreBallRight.anchor.set(.5, .5);
            this._scoreBallRight.scale.set(.6, .6);
            this._matchHistoryRight = Game.game.add.bitmapText(this._scoreBallRight.x -
                Game.scale(45), this._scoreBasePosition.y - Game.scale(22), "normal", "0", Game.scale(60));
            this._matchHistoryRight.anchor.set(1, .5);
            Game.state.midLayer.add(this._matchHistoryRight);
            this._scoreText = Game.game.add.bitmapText(this._scoreBasePosition.x, this._scoreBasePosition.y - Game.scale(20), "normal", "0" + this._seperatorString + "0", Game.scale(120));
            this._scoreText.align = "center";
            this._scoreText.anchor.set(.5, .5);
            this._hideScore();
            Game.state.midLayer.add(this._scoreText);
            this._countDownText = Game.game.add.bitmapText(Game.dimensions.width /
                2, Game.dimensions.height / 2, "normal", "", Game.scale(170));
            this._countDownText.align = "center";
            this._countDownText.anchor.set(.5, .5);
            Game.state.uiLayer.add(this._countDownText);
            var l = Game.game.add.sprite(0, 0, "preroll", "poki-logo-small");
            l.anchor.set(.5, .5);
            l.position.set(.5 * Game.dimensions.width - Game.scale(1100) + .5 * l.width, Game.scale(50) + .5 * l.height);
            l.inputEnabled = !0;
            l.input.useHandCursor = !0;
            l.events.onInputOver.add(function() {
                1 == l.scale.x && l.scale.setTo(1.1, 1.1)
            });
            l.events.onInputOut.add(function() {
                l.scale.setTo(1,
                    1)
            });
            l.events.onInputDown.add(function() {
                Game.analytics.event("Button", "PokiInGame", "clicked");
                Game.openUrl("http://poki.com")
            }, this);
            Game.state.uiLayer.add(l);
            this._createFlashText();
            this._createPauseButtonAndMenu()
        }
        b.prototype._createPauseButtonAndMenu = function() {
            var a = Game.game.add.sprite(0, 0, "icons", "icon-pause"),
                b = new c.RoundButton(a, function() {
                    Game.events.trigger("inGamePause");
                    b.visible = !1
                });
            Game.events.addListener("inGameResume", function() {
                b.visible = !0
            });
            b.position.set(Game.dimensions.width -
                Game.scale(100), Game.scale(100));
            a = new c.PauseMenu(new Phaser.Point(.5 * Game.dimensions.width, .5 * Game.dimensions.height));
            Game.state.fixedUiLayer.addMultiple([b, a])
        };
        b.prototype._createFlashText = function() {
            this._textFlasher = new c.FlashText;
            Game.state.uiLayer.add(this._textFlasher)
        };
        b.prototype.doCountDown = function(a) {
            var b = this,
                c = 3,
                d = setInterval(function() {
                    util.Sound.playFx("countdown");
                    b._countDownText.text = c + "";
                    0 === c && (clearInterval(d), b._showScore(), util.Sound.playFx("whistle-start"), a(), setTimeout(function() {
                        b._countDownText.text =
                            ""
                    }, 600));
                    c--
                }, 600)
        };
        b.prototype.setMatchHistory = function(a, b) {
            this._matchHistoryLeft.text = a;
            this._matchHistoryRight.text = b
        };
        b.prototype.setTime = function(a) {
            for (var b = 0; 4 > b; b++) this._timerDigits[b].text = a[b]
        };
        b.prototype.setScore = function(a) {
            this._scoreText.text = a[0] + this._seperatorString + a[1]
        };
        b.prototype._showScore = function() {
            this._scoreText.alpha = 1;
            this._scoreBackground.alpha = 1;
            this._scoreBallLeft.alpha = 1;
            this._scoreBallRight.alpha = 1;
            this._matchHistoryLeft.alpha = 1;
            this._matchHistoryRight.alpha =
                1
        };
        b.prototype._hideScore = function() {
            this._scoreText.alpha = 0;
            this._scoreBackground.alpha = 0;
            this._scoreBallLeft.alpha = 0;
            this._scoreBallRight.alpha = 0;
            this._matchHistoryLeft.alpha = 0;
            this._matchHistoryRight.alpha = 0
        };
        b.prototype._highlightScore = function() {
            Game.game.add.tween(this._scoreText.position).to({
                y: Game.dimensions.height / 2
            }, 500, Phaser.Easing.Quadratic.Out, !0);
            Game.game.add.tween(this._scoreText.scale).to({
                x: 2,
                y: 2
            }, 500, Phaser.Easing.Quadratic.Out, !0)
        };
        b.prototype._hideHighlightScore = function() {
            Game.game.add.tween(this._scoreText.position).to({
                    y: this._scoreBasePosition.y
                },
                500, Phaser.Easing.Quadratic.Out, !0);
            Game.game.add.tween(this._scoreText.scale).to({
                x: 1,
                y: 1
            }, 500, Phaser.Easing.Quadratic.Out, !0)
        };
        b.prototype.endScreen = function(a) {
            var b = this;
            this._highlightScore();
            setTimeout(function() {
                b._hideHighlightScore();
                a()
            }, 3E3)
        };
        b.prototype.flashGoal = function(a) {
            var b = this;
            this._goalFlashBehind.alpha = .7;
            this._goalFlashBehind.scale.set(.1, .1);
            this._goalFlashBehind.position.set(Game.dimensions.width / 2, Game.dimensions.height - Game.scale(400));
            this._goalFlashFront.alpha = 1;
            this._goalFlashFront.scale.set(.7,
                .7);
            this._goalFlashFront.y = Game.scale(-600);
            this._goalFlashFront.angle = 0;
            Game.game.world.bringToTop(this._goalFlashFront);
            Game.game.add.tween(this._goalFlashBehind).to({
                y: Game.scale(-600),
                alhpa: 1
            }, 700, Phaser.Easing.Quadratic.Out, !0);
            Game.game.add.tween(this._goalFlashBehind.scale).to({
                x: .7,
                y: .7
            }, 700, Phaser.Easing.Quadratic.Out, !0);
            var c = Game.game.add.tween(this._goalFlashFront).to({
                y: Game.scale(400),
                alhpa: 1
            }, 500, Phaser.Easing.Quadratic.Out, !0, 700);
            Game.game.add.tween(this._goalFlashFront.scale).to({
                x: .9,
                y: .9
            }, 500, Phaser.Easing.Quadratic.Out, !0, 700);
            c.onComplete.add(function() {
                Game.game.add.tween(b._goalFlashFront).to({
                    angle: 1
                }, 50, Phaser.Easing.Quadratic.Out, !0).onComplete.add(function() {
                    Game.game.add.tween(b._goalFlashFront).to({
                        angle: -1
                    }, 50, Phaser.Easing.Quadratic.Out, !0, 0, 15, !0).onComplete.add(function() {
                        var c = Game.game.add.tween(b._goalFlashFront).to({
                            alpha: 0,
                            y: Game.scale(-600)
                        }, 1E3, Phaser.Easing.Quadratic.Out, !0);
                        a && c.onComplete.add(a)
                    })
                })
            })
        };
        b.prototype.flashGoldenGoal = function(a) {
            var b = this;
            this._goalFlashBehind.frameName = "golden-goal";
            this._goalFlashFront.frameName = "golden-goal";
            this.flashGoal(function() {
                a && a();
                b._goalFlashBehind.frameName = "goal";
                b._goalFlashFront.frameName = "goal"
            })
        };
        b.prototype.flashText = function(a, b, c) {
            void 0 === b && (b = !1);
            return this._textFlasher.flashText(a, b, c)
        };
        b.prototype.questionDisplay = function(a, b, e, d, l) {
            void 0 === d && (d = "YES");
            void 0 === l && (l = "NO");
            new c.QuestionDisplay(a, b, e, d, l)
        };
        return b
    }();
    c.GameUI = d
})(ui || (ui = {}));
(function(c) {
    var d = function() {
        return function(b) {
            var a = Game.game.add.sprite(0, 0, "ui", "logo-only");
            a.anchor.set(.5, .5);
            a.position.set(b.x - Game.scale(160), b.y + Game.scale(15));
            a.scale.set(.25, .25);
            b = Game.game.add.sprite(0, 0, "ui", "logo-sub");
            b.anchor.set(.5, .5);
            b.scale.set(.5, .5);
            b.position.set(a.x + Game.scale(300), a.y + Game.scale(15))
        }
    }();
    c.IngameLogo = d
})(ui || (ui = {}));
(function(c) {
    var d = function() {
        function b() {
            this._percentageLoaded = 0;
            this._drawLogos();
            this._drawLoadingBar();
            this.updateProgressBar(0)
        }
        b.prototype._drawLogos = function() {
            this._logo = Game.game.add.sprite(Game.game.world.centerX, Game.game.world.centerY, "preroll", "logo");
            this._logo.anchor.set(.5, .5);
            this._logo.position.set(Game.dimensions.width / 2, Game.dimensions.height / 2 - Game.scale(200));
            var a = Game.game.add.sprite(this._logo.x, this._logo.y, "preroll", "poki-logo-small");
            a.anchor.set(.5, .5);
            a.position.set(Game.dimensions.width /
                2, a.height);
            a.inputEnabled = !0;
            a.input.useHandCursor = !0;
            a.events.onInputOver.add(function() {
                1 == a.scale.x && a.scale.setTo(1.2, 1.2)
            });
            a.events.onInputOut.add(function() {
                a.scale.setTo(1, 1)
            });
            a.events.onInputDown.add(function() {
                Game.analytics.event("Button", "PokiPreroll", "clicked");
                Game.openUrl("http://poki.com")
            }, this)
        };
        b.prototype._drawLoadingBar = function() {
            var a = Game.game.add.group(),
                b = .8 * Game.dimensions.width,
                c = Game.game.add.tileSprite(3, 0, b - 3, Game.scale(206), "preroll", "load-bar-bg");
            a.add(c);
            var d =
                Game.game.add.tileSprite(3, 0, b - 3, Game.scale(206), "preroll", "load-bar");
            a.add(d);
            d.width = c.width = b - Game.scale(60);
            d.x = c.x = Game.scale(40);
            d.y = c.y = Game.scale(36);
            c = Game.game.add.tileSprite(0, 0, 0, 0, "preroll", "load-frame-middle");
            a.add(c);
            var l = Game.game.add.sprite(0, 0, "preroll", "load-frame-left");
            a.add(l);
            var h = Game.game.add.sprite(0, 0, "preroll", "load-frame-right");
            a.add(h);
            l.x = 1;
            h.x = b - h.width - 1;
            c.x = l.width;
            c.width = b - l.width - h.width;
            c.height = Game.scale(276);
            a.x = .1 * Game.dimensions.width;
            a.y = this._logo.bottom +
                Game.scale(150);
            this._fullBarWidth = d.width;
            this._loadingBar = d;
            util.Cleaner.addToDestroyQueue(a, "LoadUI")
        };
        b.prototype.updateProgressBar = function(a) {
            this._percentageLoaded += a;
            this._loadingBar.width = this._fullBarWidth * this._percentageLoaded / 100
        };
        b.destroy = function() {
            util.Cleaner.cleanupQueue("LoadUI")
        };
        return b
    }();
    c.LoadUI = d
})(ui || (ui = {}));
(function(c) {
    var d = function() {
        function b(a) {
            this._kickDown = this._jumpDown = this._rightDown = this._leftDown = !1;
            this._buttonSize = new Phaser.Point(Game.scale(400), Game.scale(350));
            this._scale = 1.2;
            this.inputAllowed = !0;
            this._leftButton = util.Sprite.createSprite(this._buttonSize.x, this._buttonSize.y, {
                r: 200,
                g: 0,
                b: 200
            });
            this._leftButton.anchor.set(0, 1);
            this._leftButton.position.set(0, Game.dimensions.height);
            this._leftButton.alpha = 0;
            this._rightButton = util.Sprite.createSprite(this._buttonSize.x, this._buttonSize.y, {
                r: 0,
                g: 200,
                b: 200
            });
            this._rightButton.anchor.set(0, 1);
            this._rightButton.position.set(this._leftButton.right, Game.dimensions.height);
            this._rightButton.alpha = 0;
            this._jumpButton = util.Sprite.createSprite(this._buttonSize.x, this._buttonSize.y, {
                r: 0,
                g: 0,
                b: 200
            });
            this._jumpButton.anchor.set(1, 1);
            this._jumpButton.position.set(Game.dimensions.width, Game.dimensions.height);
            this._jumpButton.alpha = 0;
            this._kickButton = util.Sprite.createSprite(this._buttonSize.x, this._buttonSize.y, {
                r: 200,
                g: 0,
                b: 0
            });
            this._kickButton.anchor.set(1,
                1);
            this._kickButton.position.set(this._jumpButton.left, Game.dimensions.height);
            this._kickButton.alpha = 0;
            this._leftHighlightButton = Game.game.add.sprite(this._leftButton.left + .5 * this._leftButton.width, this._leftButton.top + .5 * this._leftButton.height, "ui", "mobi-move-down");
            this._leftHighlightButton.anchor.set(.5, .5);
            this._leftHighlightButton.scale.set(this._scale, this._scale);
            this._leftHighlightButton.scale.x *= -1;
            this._rightHighlightButton = Game.game.add.sprite(this._rightButton.left + .5 * this._rightButton.width,
                this._rightButton.top + .5 * this._rightButton.height, "ui", "mobi-move-down");
            this._rightHighlightButton.anchor.set(.5, .5);
            this._rightHighlightButton.scale.set(this._scale, this._scale);
            this._jumpHighlightButton = Game.game.add.sprite(this._jumpButton.left + .5 * this._jumpButton.width, this._jumpButton.top + .5 * this._jumpButton.height, "ui", "mobi-round-down");
            this._jumpHighlightButton.anchor.set(.5, .5);
            this._jumpHighlightButton.scale.set(this._scale, this._scale);
            this._kickHighlightButton = Game.game.add.sprite(this._kickButton.left +
                .5 * this._kickButton.width, this._kickButton.top + .5 * this._kickButton.height, "ui", "mobi-round-down");
            this._kickHighlightButton.anchor.set(.5, .5);
            this._kickHighlightButton.scale.set(this._scale, this._scale);
            this._leftDisplayButton = Game.game.add.sprite(this._leftButton.left + .5 * this._leftButton.width, this._leftButton.top + .5 * this._leftButton.height, "ui", "mobi-right");
            this._leftDisplayButton.anchor.set(.5, .5);
            this._leftDisplayButton.scale.set(this._scale, this._scale);
            this._leftDisplayButton.scale.x *= -1;
            this._rightDisplayButton =
                Game.game.add.sprite(this._rightButton.left + .5 * this._rightButton.width, this._rightButton.top + .5 * this._rightButton.height, "ui", "mobi-right");
            this._rightDisplayButton.anchor.set(.5, .5);
            this._rightDisplayButton.scale.set(this._scale, this._scale);
            this._jumpDisplayButton = Game.game.add.sprite(this._jumpButton.left + .5 * this._jumpButton.width, this._jumpButton.top + .5 * this._jumpButton.height, "ui", "mobi-jump");
            this._jumpDisplayButton.anchor.set(.5, .5);
            this._jumpDisplayButton.scale.set(this._scale, this._scale);
            this._kickDisplayButton = Game.game.add.sprite(this._kickButton.left + .5 * this._kickButton.width, this._kickButton.top + .5 * this._kickButton.height, "ui", "mob-shoot");
            this._kickDisplayButton.anchor.set(.5, .5);
            this._kickDisplayButton.scale.set(this._scale, this._scale);
            Game.state.fixedUiLayer.addMultiple([this._leftButton, this._rightButton, this._kickButton, this._jumpButton, this._leftDisplayButton, this._rightDisplayButton, this._kickDisplayButton, this._jumpDisplayButton]);
            this._player = a;
            this._setup()
        }
        b.prototype._setup =
            function() {
                var a = this;
                this._leftButton.inputEnabled = !0;
                this._leftButton.events.onInputOver.add(function() {
                    a._leftDown = !0
                });
                this._leftButton.events.onInputDown.add(function() {
                    a._leftDown = !0
                });
                this._leftButton.events.onInputOut.add(function() {
                    a._leftDown = !1
                });
                this._leftButton.events.onInputUp.add(function() {
                    a._leftDown = !1
                });
                this._rightButton.inputEnabled = !0;
                this._rightButton.events.onInputOver.add(function() {
                    a._rightDown = !0
                });
                this._rightButton.events.onInputDown.add(function() {
                    a._rightDown = !0
                });
                this._rightButton.events.onInputOut.add(function() {
                    a._rightDown = !1
                });
                this._rightButton.events.onInputUp.add(function() {
                    a._rightDown = !1
                });
                this._jumpButton.inputEnabled = !0;
                this._jumpButton.events.onInputDown.add(function() {
                    a.inputAllowed && a._player.jump();
                    a._jumpDown = !0
                });
                this._jumpButton.events.onInputUp.add(function() {
                    a._jumpDown = !1
                });
                this._kickButton.inputEnabled = !0;
                this._kickButton.events.onInputDown.add(function() {
                    a.inputAllowed && a._player.kick();
                    a._kickDown = !0
                });
                this._kickButton.events.onInputUp.add(function() {
                    a._kickDown = !1
                })
            };
        b.prototype._doButtonHighlights =
            function() {
                this._leftHighlightButton.alpha = this._leftDown ? 1 : 0;
                this._rightHighlightButton.alpha = this._rightDown ? 1 : 0;
                this._jumpHighlightButton.alpha = this._jumpDown ? 1 : 0;
                this._kickHighlightButton.alpha = this._kickDown ? 1 : 0
            };
        b.prototype.update = function() {
            this._doButtonHighlights();
            this.inputAllowed ? (this._leftDown && !this._rightDown && this._player.moveLeft(), this._rightDown && !this._leftDown && this._player.moveRight(), this._leftDown || this._rightDown || this._player.idle()) : this._player.idle()
        };
        return b
    }();
    c.MobileControls =
        d
})(logic || (logic = {}));
(function(c) {
    var d = function(b) {
        function a(a, e) {
            var d = this;
            void 0 === e && (e = null);
            b.call(this, Game.game);
            null === e && (e = new Phaser.Point(a.x, a.y - Game.dimensions.height));
            this._moveFromPosition = e;
            this._pauseBg = Game.game.add.sprite(0, 0, "ui", "gui-menu");
            this._pauseBg.anchor.set(.5, .5);
            this._hiddenCloseButton = Game.game.add.button(this._pauseBg.right, this._pauseBg.top);
            this._hiddenCloseButton.anchor.set(.5, .5);
            this._hiddenCloseButton.width = Game.scale(300);
            this._hiddenCloseButton.height = this._hiddenCloseButton.width;
            this._hiddenCloseButton.onInputUp.add(function() {
                d._resume()
            });
            this.visible = !0;
            Game.events.addListener("inGamePause", function() {
                d.visible = !0;
                Game.game.add.tween(d.position).to({
                    x: a.x,
                    y: a.y
                }, 500, Phaser.Easing.Quadratic.Out, !0)
            });
            this.position = e.clone();
            this._soundButtons = new c.SoundButtons;
            this._soundButtons.position.set(this._pauseBg.right - Game.scale(675), this._pauseBg.top + Game.scale(200));
            this._soundButtons.scale.set(1.2, 1.2);
            this._resumeButton = new c.Button(new Phaser.Point(0, .5 * this._pauseBg.height -
                Game.scale(650)), "resume", "normal", Game.scale(100));
            this._resumeButton.onClick(function() {
                d._resume()
            });
            this._quitButton = new c.Button(new Phaser.Point(0, .5 * this._pauseBg.height - Game.scale(250)), "quit", "normal", Game.scale(100));
            this._quitButton.onClick(function() {
                new c.QuestionDisplay("Are you sure?", function() {
                    Game.game.state.start("SplashState")
                }, function() {})
            });
            this.addMultiple([this._pauseBg, this._hiddenCloseButton, this._soundButtons, this._resumeButton, this._quitButton])
        }
        __extends(a, b);
        a.prototype._resume =
            function() {
                var a = this;
                Game.events.trigger("inGameResume");
                Game.game.add.tween(this.position).to({
                    x: this._moveFromPosition.x,
                    y: this._moveFromPosition.y
                }, 500, Phaser.Easing.Quadratic.Out, !0).onComplete.add(function() {
                    a.visible = !1
                })
            };
        return a
    }(Phaser.Group);
    c.PauseMenu = d
})(ui || (ui = {}));
(function(c) {
    var d = function(b) {
        function a(a, c) {
            void 0 === c && (c = 1);
            b.call(this, Game.game);
            this._headRelativePosition = new Phaser.Point(Game.scale(0), Game.scale(110));
            this._headScale = new Phaser.Point(1, 1);
            this._leftShoeRelativePosition = new Phaser.Point(Game.scale(65), Game.scale(260));
            this._leftShoeScale = new Phaser.Point(1, 1);
            this._rightShoeRelativePosition = new Phaser.Point(Game.scale(-45), Game.scale(260));
            this._rightShoeScale = new Phaser.Point(1, 1);
            this._leftArmRelativePosition = new Phaser.Point(Game.scale(175),
                Game.scale(170));
            this._leftArmScale = new Phaser.Point(1, 1);
            this._rightArmRelativePosition = new Phaser.Point(Game.scale(-195), Game.scale(170));
            this._rightArmScale = new Phaser.Point(1, 1);
            this._rightArmAngle = this._leftArmAngle = this._rightShoeAngle = this._leftShoeAngle = this._headAngle = 0;
            this._playerScale = 1;
            this._characterString = a;
            this._build();
            this._doPositioning(c)
        }
        __extends(a, b);
        a.prototype._build = function() {
            this._leftArm = Game.game.add.sprite(0, 0, "character", this._characterString + "-hand-back", this);
            this._leftArm.anchor.set(.5,
                .5);
            this._leftShoe = Game.game.add.sprite(0, 0, "character", this._characterString + "-foot", this);
            this._leftShoe.anchor.set(.5, .5);
            this._head = Game.game.add.sprite(0, 0, "character", this._characterString + "-head", this);
            this._head.anchor.set(.5, .8);
            this._rightShoe = Game.game.add.sprite(0, 0, "character", this._characterString + "-foot", this);
            this._rightShoe.anchor.set(.5, .5);
            this._rightArm = Game.game.add.sprite(0, 0, "character", this._characterString + "-hand-front", this);
            this._rightArm.anchor.set(.5, .5)
        };
        a.prototype._doPositioning =
            function(a) {
                this._leftArm.position.set(this.x + this._leftArmRelativePosition.x * this._playerScale * a, this.y + this._leftArmRelativePosition.y * this._playerScale);
                this._leftArm.angle = this._leftArmAngle * a;
                this._leftArm.scale.set(this._leftArmScale.x * this._playerScale * a, this._leftArmScale.y * this._playerScale);
                this._rightArm.position.set(this.x + this._rightArmRelativePosition.x * this._playerScale * a, this.y + this._rightArmRelativePosition.y * this._playerScale);
                this._rightArm.angle = this._rightArmAngle * a;
                this._rightArm.scale.set(this._rightArmScale.x *
                    this._playerScale * a, this._rightArmScale.y * this._playerScale);
                this._head.position.set(this.x + this._headRelativePosition.x * this._playerScale * a, this.y + this._headRelativePosition.y * this._playerScale);
                this._head.angle = this._headAngle * a;
                this._leftShoe.position.set(this.x + this._leftShoeRelativePosition.x * this._playerScale * a, this.y + this._leftShoeRelativePosition.y * this._playerScale);
                this._leftShoe.scale.set(this._leftShoeScale.x * this._playerScale * a, this._leftShoeScale.y * this._playerScale);
                this._rightShoe.position.set(this.x +
                    this._rightShoeRelativePosition.x * this._playerScale * a, this.y + this._rightShoeRelativePosition.y * this._playerScale);
                this._rightShoe.scale.set(this._rightShoeScale.x * this._playerScale * a, this._rightShoeScale.y * this._playerScale)
            };
        a.prototype.changeCharacter = function(a) {
            this._characterString = a;
            this._leftArm.frameName = this._characterString + "-hand-back";
            this._rightArm.frameName = this._characterString + "-hand-front";
            this._leftShoe.frameName = this._characterString + "-foot";
            this._rightShoe.frameName = this._characterString +
                "-foot";
            this._head.frameName = this._characterString + "-head"
        };
        return a
    }(Phaser.Group);
    c.PlayerIcon = d
})(ui || (ui = {}));
(function(c) {
    var d = function(b) {
        function a(a, e) {
            void 0 === e && (e = !1);
            b.call(this, Game.game);
            this.selected = !1;
            this._isAI = e;
            this._background = Game.game.add.sprite(0, 0, "ui", "player-select", Game.state.frontLayer);
            this._background.anchor.set(.5, .5);
            this._player = new c.PlayerIcon("aguero");
            this._player.scale.set(.55, .55);
            this._player.position.y -= Game.scale(250);
            this.position = a;
            this.addMultiple([this._background, this._player]);
            if (Game.game.device.desktop || e) this.controlsIndicator = new c.ControlsIndicator(new Phaser.Point(0,
                Game.scale(175)), e, 0), this.add(this.controlsIndicator)
        }
        __extends(a, b);
        a.prototype.setPlayer = function(a) {
            this._spriteKey = a["sprite-key"];
            this._player.changeCharacter(this._spriteKey)
        };
        a.prototype.getPlayer = function() {
            return this._spriteKey
        };
        return a
    }(Phaser.Group);
    c.PlayerSelector = d
})(ui || (ui = {}));
(function(c) {
    var d = function(b) {
        function a(a, e, d, l, h, m) {
            var k = this;
            void 0 === l && (l = "YES");
            void 0 === h && (h = "NO");
            void 0 === m && (m = !1);
            b.call(this, Game.game);
            this._questionDisplayOverlay || (this._questionDisplayOverlay = Game.game.add.existing(util.Sprite.createSprite(Game.dimensions.width, Game.dimensions.height, {
                r: 0,
                g: 0,
                b: 0
            })), this._questionDisplayOverlay.alpha = .5, this._questionDisplayOverlay.visible = !1, Game.state.uiLayer.add(this._questionDisplayOverlay));
            this._questionDisplayOverlay.visible = !0;
            this._flashText =
                new c.FlashText;
            var n = new Phaser.Point(0, Game.dimensions.height / 2 + Game.scale(300));
            this._positiveButton ? (this._positiveButton.setText(l), this._positiveButton.clearClick()) : this._positiveButton = new c.Button(n, l, "normal", Game.scale(90));
            this._negativeButton ? (this._negativeButton.setText(h), this._negativeButton.clearClick()) : this._negativeButton = new c.Button(n, h, "normal", Game.scale(90));
            util.PositionHelper.centerHorizontally([this._negativeButton, this._positiveButton], Game.scale(100));
            this._negativeButton.visible = !1;
            this._positiveButton.visible = !1;
            var p = this._flashText.flashText(a, !0, function() {
                k._negativeButton.visible = !0;
                k._positiveButton.visible = !0
            });
            this._negativeButton.onClick(function() {
                k._negativeButton.visible = !1;
                k._positiveButton.visible = !1;
                k._negativeButton.x = 1.5 * Game.dimensions.width;
                k._positiveButton.x = 1.5 * Game.dimensions.width;
                k._questionDisplayOverlay.visible = !1;
                p();
                k.destroy(!0);
                d()
            });
            this._positiveButton.onClick(function() {
                k._negativeButton.visible = !1;
                k._positiveButton.visible = !1;
                k._negativeButton.x =
                    1.5 * Game.dimensions.width;
                k._positiveButton.x = 1.5 * Game.dimensions.width;
                k._questionDisplayOverlay.visible = !1;
                p();
                k.destroy(!0);
                e()
            });
            m && (this._questionDisplayOverlay.inputEnabled = !0, this._questionDisplayOverlay.events.onInputUp.add(function() {
                p();
                k.destroy(!0)
            }));
            this.addMultiple([this._questionDisplayOverlay, this._flashText, this._negativeButton, this._positiveButton])
        }
        __extends(a, b);
        return a
    }(Phaser.Group);
    c.QuestionDisplay = d
})(ui || (ui = {}));
(function(c) {
    var d = function(b) {
        function a(a, c) {
            b.call(this, Game.game);
            this._button = Game.game.add.button(0, 0, "ui", function() {
                c()
            }, this, "button-down", "button-up", "button-down");
            this._button.anchor.set(.5, .5);
            var d = .5 * this._button.width / Math.max(a.width, a.height);
            this.add(this._button);
            a.anchor.set(.5, .5);
            a.scale.set(d, d);
            this.add(a)
        }
        __extends(a, b);
        return a
    }(Phaser.Group);
    c.RoundButton = d
})(ui || (ui = {}));
(function(c) {
    var d = function(b) {
        function a(a, c, d) {
            var l = this;
            b.call(this, Game.game);
            this.index = 0;
            this._onChangeCallbacks = [];
            this.list = d;
            this._arrowLeft = Game.game.add.button(a.x, a.y, "ui", function(a, b, c) {
                c && (util.Sound.playFx("button"), l.index--, 0 > l.index && (l.index = l.list.length - 1), l._fireChange())
            }, this, "arrow-down", "arrow-up", "arrow-up");
            this._arrowLeft.scale.x *= -1;
            this._arrowLeft.anchor.set(.5, .5);
            this._arrowRight = Game.game.add.button(c.x, c.y, "ui", function(a, b, c) {
                c && (util.Sound.playFx("button"), l.index++,
                    l.index >= l.list.length && (l.index = 0), l._fireChange())
            }, this, "arrow-down", "arrow-up", "arrow-up");
            this._arrowRight.anchor.set(.5, .5);
            this.addMultiple([this._arrowLeft, this._arrowRight])
        }
        __extends(a, b);
        a.prototype.onChange = function(a) {
            this._onChangeCallbacks.push(a)
        };
        a.prototype._fireChange = function() {
            for (var a = 0; a < this._onChangeCallbacks.length; a++) this._onChangeCallbacks[a](this.list[this.index], this.index)
        };
        return a
    }(Phaser.Group);
    c.Selector = d
})(ui || (ui = {}));
(function(c) {
    var d = function(b) {
        function a() {
            b.call(this, Game.game);
            var a = Game.game.add.sprite(0, 0, "icons", util.Sound.soundMuted ? "icon-soundoff" : "icon-sound"),
                e = new c.RoundButton(a, function() {
                    util.Sound.soundMuted ? (a.frameName = "icon-sound", util.Sound.unMuteSounds()) : (a.frameName = "icon-soundoff", util.Sound.muteSounds())
                });
            e.position.set(-Game.scale(125), e.height / 2);
            var d = Game.game.add.sprite(0, 0, "icons", util.Sound.musicMuted ? "icon-music-off" : "icon-music"),
                l = new c.RoundButton(d, function() {
                    util.Sound.musicMuted ?
                        (d.frameName = "icon-music", util.Sound.unMuteMusic()) : (d.frameName = "icon-music-off", util.Sound.muteMusic())
                });
            l.position.set(Game.scale(125), e.y);
            this.addMultiple([e, l])
        }
        __extends(a, b);
        return a
    }(Phaser.Group);
    c.SoundButtons = d
})(ui || (ui = {}));
(function(c) {
    var d = function(b) {
        function a(a, e, d, l, h, m) {
            var k = this;
            void 0 === e && (e = !1);
            void 0 === d && (d = 0);
            void 0 === l && (l = .65);
            void 0 === h && (h = !1);
            void 0 === m && (m = []);
            b.call(this, Game.game);
            this.switched = !1;
            this._spacing = Game.scale(310);
            this._controlOffset = d;
            this._scaling = l;
            a = Game.game.add.bitmapText(0, .06 * -Game.dimensions.height * this._scaling, "normal", a.toUpperCase().charAt(0) + a.toLocaleLowerCase().substring(1), Game.scale(100));
            a.anchor.set(.5, 1);
            a.align = "center";
            this._teamSelector = new c.TeamSelector(new Phaser.Point(0,
                .175 * -Game.dimensions.height), 0);
            this.selectedTeam = this._teamSelector.getCurrentSelectedTeam();
            this._teamSelector.onChangeTeam(function(a) {
                k.selectedTeam = a;
                a = Object.keys(k.selectedTeam.players);
                k.selectedPlayers = [k.selectedTeam.players[a[0]], k.selectedTeam.players[a[1]]];
                k._playerDisplays[0].setPlayer(k.selectedPlayers[0]);
                k._playerDisplays[1].setPlayer(k.selectedPlayers[1])
            });
            this._playerDisplays = [];
            this._playerDisplays.push(new c.PlayerSelector(new Phaser.Point(-this._spacing * this._scaling, .15 *
                Game.dimensions.height * this._scaling), e));
            this._playerDisplays.push(new c.PlayerSelector(new Phaser.Point(this._spacing * this._scaling, .15 * Game.dimensions.height * this._scaling), e));
            this._playerDisplays[0].scale.set(this._scaling, this._scaling);
            this._playerDisplays[1].scale.set(this._scaling, this._scaling);
            d = Object.keys(this.selectedTeam.players);
            this.selectedPlayers = [this.selectedTeam.players[d[0]], this.selectedTeam.players[d[1]]];
            this._playerDisplays[0].setPlayer(this.selectedPlayers[0]);
            this._playerDisplays[1].setPlayer(this.selectedPlayers[1]);
            this.addMultiple(this._playerDisplays);
            this.addMultiple([this._teamSelector, a]);
            e || h || !Game.game.device.desktop || (h = Game.game.add.sprite(0, 0, "icons", "icon-switch"), h.anchor.set(.5, .5), h = new c.RoundButton(h, function() {
                k.switched = !k.switched;
                k._updatePlayerControlDisplays()
            }), h.position.set(0, Game.scale(450)), h.scale.set(.8, .8), this.add(h));
            e || this._updatePlayerControlDisplays(m)
        }
        __extends(a, b);
        a.prototype._updatePlayerControlDisplays = function(a) {
            void 0 === a && (a = []);
            this._playerDisplays[0].controlsIndicator &&
                this._playerDisplays[1].controlsIndicator && (2 == a.length ? (this._playerDisplays[0].controlsIndicator.setControls(a[0], !1), this._playerDisplays[1].controlsIndicator.setControls(a[1], !1)) : this.switched ? (this._playerDisplays[0].controlsIndicator.setControls(this._controlOffset + 1, !1), this._playerDisplays[1].controlsIndicator.setControls(this._controlOffset, !1)) : (this._playerDisplays[0].controlsIndicator.setControls(this._controlOffset, !1), this._playerDisplays[1].controlsIndicator.setControls(this._controlOffset +
                    1, !1)))
        };
        a.prototype.getAILevels = function() {
            return this._playerDisplays[0].controlsIndicator.isAI() && this._playerDisplays[1].controlsIndicator.isAI() ? [this._playerDisplays[0].controlsIndicator.getAILevel(), this._playerDisplays[1].controlsIndicator.getAILevel()] : null
        };
        a.prototype.randomize = function() {
            this._teamSelector.randomizeTeam()
        };
        return a
    }(Phaser.Group);
    c.TeamAndDoublePlayerSelector = d
})(ui || (ui = {}));
(function(c) {
    var d = function(b) {
        function a(a, e, d, l) {
            var h = this;
            void 0 === e && (e = !1);
            void 0 === d && (d = 0);
            void 0 === l && (l = !1);
            b.call(this, Game.game);
            this.switched = !1;
            this._arrowMargin = Game.scale(220);
            this.controlIndex = d;
            a = Game.game.add.bitmapText(0, .06 * -Game.dimensions.height, "normal", a.toUpperCase().charAt(0) + a.toLocaleLowerCase().substring(1), Game.scale(100));
            a.anchor.set(.5, 1);
            a.align = "center";
            this._teamSelector = new c.TeamSelector(new Phaser.Point(0, .175 * -Game.dimensions.height), 0);
            this.selectedTeam = this._teamSelector.getCurrentSelectedTeam();
            this._teamSelector.onChangeTeam(function(a) {
                h.selectedTeam = a;
                m.list = Object.keys(h.selectedTeam.players);
                h.selectedPlayer = h.selectedTeam.players[m.list[0]];
                h._playerDisplay.setPlayer(h.selectedTeam.players[m.list[0]])
            });
            this._playerDisplay = new c.PlayerSelector(new Phaser.Point(0, .15 * Game.dimensions.height), e);
            "undefined" !== typeof this._playerDisplay.controlsIndicator && this._playerDisplay.controlsIndicator.setControls(d, e);
            var m = new c.Selector(new Phaser.Point(-this._arrowMargin, this._playerDisplay.y -
                Game.scale(180)), new Phaser.Point(this._arrowMargin, this._playerDisplay.y - Game.scale(180)), Object.keys(this.selectedTeam.players));
            m.list = Object.keys(this.selectedTeam.players);
            m.onChange(function(a) {
                h.selectedPlayer = h.selectedTeam.players[a];
                h._playerDisplay.setPlayer(h.selectedPlayer)
            });
            this.selectedPlayer = this.selectedTeam.players[m.list[0]];
            this._playerDisplay.setPlayer(this.selectedPlayer);
            this.addMultiple([this._teamSelector, this._playerDisplay, m, a]);
            e || l || !Game.game.device.desktop || (d = Game.game.add.sprite(0,
                0, "icons", "icon-switch"), d.anchor.set(.5, .5), d = new c.RoundButton(d, function() {
                h.switched = !h.switched;
                h._updatePlayerControlDisplays()
            }), d.position.set(0, Game.scale(700)), d.scale.set(.8, .8), this.add(d));
            e || this._updatePlayerControlDisplays()
        }
        __extends(a, b);
        a.prototype._updatePlayerControlDisplays = function() {
            this._playerDisplay.controlsIndicator && (this.switched ? this._playerDisplay.controlsIndicator.setControls(this.controlIndex + 1, !1) : this._playerDisplay.controlsIndicator.setControls(this.controlIndex, !1))
        };
        a.prototype.getAILevel = function() {
            return this._playerDisplay.controlsIndicator.isAI() ? this._playerDisplay.controlsIndicator.getAILevel() : null
        };
        a.prototype.randomize = function() {
            this._teamSelector.randomizeTeam()
        };
        return a
    }(Phaser.Group);
    c.TeamAndSinglePlayerSelector = d
})(ui || (ui = {}));
(function(c) {
    var d = function(b) {
        function a(a, c) {
            var d = this;
            void 0 === c && (c = 0);
            b.call(this, Game.game);
            this._changedTeamCallbacks = [];
            this._currentIndex = 0;
            this._teamBackground = Game.game.add.sprite(0, 0, "ui", "team-logo-bg");
            this._teamBackground.scale.set(.6, .6);
            this._currentIndex = c;
            this._arrowLeft = Game.game.add.button(0, 0, "ui", function(a, b, c) {
                    c && (util.Sound.playFx("button"), d._currentIndex--, 0 > d._currentIndex && (d._currentIndex = d._getTotalTeams() - 1), d._setTeam(d._getTeamByIndex(d._currentIndex), !0))
                }, this,
                "arrow-down", "arrow-up", "arrow-up");
            this._arrowLeft.scale.x = -1;
            this._arrowLeft.anchor.set(.5, .5);
            this._arrowRight = Game.game.add.button(0, 0, "ui", function(a, b, c) {
                c && (util.Sound.playFx("button"), d._currentIndex++, d._currentIndex >= d._getTotalTeams() && (d._currentIndex = 0), d._setTeam(d._getTeamByIndex(d._currentIndex), !1))
            }, this, "arrow-down", "arrow-up", "arrow-up");
            this._arrowRight.anchor.set(.5, .5);
            this._teamdata = Game.game.cache.getJSON("teamdata").teams;
            var l = this._getTeamByIndex(c);
            this._teamIndicator =
                Game.game.add.sprite(0, 0, "teams", "teamlogo-" + l["sprite-key"]);
            this._setTeam(l, !1, !0);
            this.addMultiple([this._teamBackground, this._arrowLeft, this._arrowRight, this._teamIndicator]);
            this.position = a;
            this._doPositioning()
        }
        __extends(a, b);
        a.prototype.onChangeTeam = function(a) {
            this._changedTeamCallbacks.push(a)
        };
        a.prototype.randomizeTeam = function() {
            var a = Math.floor(Math.random() * this._getTotalTeams()),
                a = this._getTeamByIndex(a);
            this._setTeam(a, !1, !0)
        };
        a.prototype._getTotalTeams = function() {
            if (this._totalTeams) return this._totalTeams;
            var a = 0,
                b;
            for (b in this._teamdata) a++;
            return this._totalTeams = a
        };
        a.prototype._getTeamByIndex = function(a) {
            var b = 0,
                c;
            for (c in this._teamdata) {
                if (a === b) return this._teamdata[c];
                b++
            }
            return null
        };
        a.prototype._getTeamByKey = function(a) {
            return this._teamdata[a]
        };
        a.prototype._fireChangeTeam = function() {
            for (var a = 0; a < this._changedTeamCallbacks.length; a++) this._changedTeamCallbacks[a](this._currentTeamData)
        };
        a.prototype.getCurrentSelectedTeam = function() {
            return this._currentTeamData
        };
        a.prototype.setPosition = function(a) {
            this.position =
                a;
            this._doPositioning()
        };
        a.prototype.hide = function() {
            this.disable();
            this._teamBackground.destroy();
            this._teamIndicator.destroy()
        };
        a.prototype._doPositioning = function() {
            this._teamBackground.anchor.set(.5, .5);
            this._teamIndicator.anchor.set(.5, .5);
            this._arrowLeft.position.set(.7 * -this._teamBackground.width, 0);
            this._arrowRight.position.set(.7 * this._teamBackground.width, 0)
        };
        a.prototype._setTeam = function(a, b, c) {
            var d = this;
            void 0 === b && (b = !0);
            void 0 === c && (c = !1);
            this._currentTeam = a["sprite-key"];
            this._currentTeamData =
                a;
            c ? (this._setIndicatorFrame(this._currentTeam), this._fireChangeTeam()) : b ? (this._fireChangeTeam(), this._animateLeft(function() {
                d._setIndicatorFrame(d._currentTeam)
            })) : (this._fireChangeTeam(), this._animateRight(function() {
                d._setIndicatorFrame(d._currentTeam)
            }))
        };
        a.prototype.disable = function() {
            this._arrowLeft.destroy();
            this._arrowRight.destroy()
        };
        a.prototype._setIndicatorFrame = function(a) {
            this._teamIndicator.frameName = "teamlogo-" + a
        };
        a.prototype._animateLeft = function(a) {
            var b = this,
                c = Game.game.add.tween(this._teamIndicator).to({
                    x: this._teamBackground.left,
                    alpha: .1
                }, 200, Phaser.Easing.Quadratic.Out, !0);
            Game.game.add.tween(this._teamIndicator.scale).to({
                x: .001,
                y: .001
            }, 200, Phaser.Easing.Quadratic.Out, !0);
            c.onComplete.add(function() {
                a && a();
                b._teamIndicator.x = b._teamBackground.right;
                Game.game.add.tween(b._teamIndicator.scale).to({
                    x: 1,
                    y: 1
                }, 200, Phaser.Easing.Quadratic.Out, !0);
                Game.game.add.tween(b._teamIndicator).to({
                    x: b._teamBackground.x,
                    alpha: 1
                }, 200, Phaser.Easing.Quadratic.Out, !0)
            })
        };
        a.prototype._animateRight = function(a) {
            var b = this,
                c = Game.game.add.tween(this._teamIndicator).to({
                    x: this._teamBackground.right,
                    alpha: .1
                }, 200, Phaser.Easing.Quadratic.Out, !0);
            Game.game.add.tween(this._teamIndicator.scale).to({
                x: .001,
                y: .001
            }, 200, Phaser.Easing.Quadratic.Out, !0);
            c.onComplete.add(function() {
                a && a();
                b._teamIndicator.x = b._teamBackground.left;
                Game.game.add.tween(b._teamIndicator.scale).to({
                    x: 1,
                    y: 1
                }, 200, Phaser.Easing.Quadratic.Out, !0);
                Game.game.add.tween(b._teamIndicator).to({
                    x: b._teamBackground.x,
                    alpha: 1
                }, 200, Phaser.Easing.Quadratic.Out, !0)
            })
        };
        return a
    }(Phaser.Group);
    c.TeamSelector = d
})(ui || (ui = {}));
(function(c) {
    var d = function(b) {
        function a(a, c, d) {
            void 0 === c && (c = 0);
            void 0 === d && (d = !1);
            b.call(this, Game.game);
            this._isBlinking = !1;
            this._tourneyGame = a;
            a = a.getTeams();
            this._teamOneBackground = Game.game.add.sprite(0, 0, "ui", "tour-score-menu" + (d ? "-player" : ""));
            this._teamOneBackground.anchor.set(.5, .5);
            this._teamTwoBackground = Game.game.add.sprite(0, 0, "ui", "tour-score-menu");
            this._teamTwoBackground.anchor.set(.5, .5);
            var l = -Game.scale(5) - this._teamOneBackground.height / 2 - c / 2;
            c = Game.scale(5) + this._teamOneBackground.height /
                2 + c / 2;
            this._teamOneBackground.y = l;
            this._teamTwoBackground.y = c;
            null !== a || "undefined" === typeof a ? (this._teamOneLogo = Game.game.add.sprite(Game.scale(-100), l, "teams", "teamlogo-" + a[0]["sprite-key"]), this._teamTwoLogo = Game.game.add.sprite(Game.scale(-100), c, "teams", "teamlogo-" + a[1]["sprite-key"])) : (this._teamOneLogo = Game.game.add.sprite(Game.scale(-100), l, "teams", "teamlogo-unknown"), this._teamTwoLogo = Game.game.add.sprite(Game.scale(-100), c, "teams", "teamlogo-unknown"));
            this._teamTwoLogo.anchor.set(.5, .5);
            this._teamTwoLogo.scale.set(.8, .8);
            this._teamOneLogo.anchor.set(.5, .5);
            this._teamOneLogo.scale.set(.8, .8);
            this._teamOneScore = Game.game.add.bitmapText(Game.scale(100), l, "digital-time-tourney", "", Game.scale(100));
            this._teamOneScore.anchor.set(.5, .5);
            this._teamTwoScore = Game.game.add.bitmapText(Game.scale(100), c, "digital-time-tourney", "", Game.scale(100));
            this._teamTwoScore.anchor.set(.5, .5);
            c = Game.game.add.sprite(this._teamOneBackground.right + Game.scale(50), 0, "ui", "tourney-arrow");
            c.scale.setTo(.5, .5);
            c.anchor.y = .5;
            this.add(this._teamOneBackground);
            this.add(this._teamTwoBackground);
            this.add(this._teamOneLogo);
            this.add(this._teamTwoLogo);
            this.add(this._teamOneScore);
            this.add(this._teamTwoScore);
            this.add(c);
            Game.state.frontLayer.add(this);
            this.refresh();
            d && !this._tourneyGame.gameFinished && this.doBlinkAnimation()
        }
        __extends(a, b);
        a.prototype.setBackgroundAlpha = function(a) {
            this._teamOneBackground.alpha = a;
            this._teamTwoBackground.alpha = a
        };
        a.prototype.doBlinkAnimation = function() {
            var a = this;
            if (!this._isBlinking) {
                this._isBlinking = !0;
                for (var b = 0; 8 > b; b++) setTimeout(function() {
                    a._teamOneBackground.frameName = "tour-score-menu" === a._teamOneBackground.frameName ? "tour-score-menu-player" : "tour-score-menu"
                }, 200 + 200 * b)
            }
        };
        a.prototype.refresh = function() {
            var a = this._tourneyGame.getTeams();
            null !== a ? (this._teamOneLogo.frameName = "teamlogo-" + a[0]["sprite-key"], this._teamTwoLogo.frameName = "teamlogo-" + a[1]["sprite-key"]) : (this._teamOneLogo.frameName = "teamlogo-unknown", this._teamTwoLogo.frameName = "teamlogo-unknown");
            this._tourneyGame.gameFinished ?
                (this._teamOneScore.text = this._tourneyGame.score[0] + "", this._teamTwoScore.text = this._tourneyGame.score[1] + "") : (this._teamOneScore.text = "", this._teamTwoScore.text = "")
        };
        return a
    }(Phaser.Group);
    c.TourneyGameDisplay = d
})(ui || (ui = {}));
(function(c) {
    var d = function(b) {
        function a() {
            var a = this;
            b.call(this, Game.game);
            this._gameDisplays = [];
            var d = [],
                f, l;
            logic.TourneyHandler.forEachRoundAndGame(function(b, h, n) {
                var p = d[h];
                null == p && (p = Game.game.add.group());
                d[h] = p;
                "undefined" === typeof a._gameDisplays[h] && (a._gameDisplays[h] = []);
                var q = logic.TourneyHandler.getCurrentGameIndexForSelectedTeam() == n && h <= logic.TourneyHandler.currentRoundIndex;
                f = 1 == h ? Game.scale(10) : Game.scale(120);
                l = (Game.scale(171) + f) * h;
                b = new c.TourneyGameDisplay(b, l, q);
                b.setBackgroundAlpha(.4);
                h == logic.TourneyHandler.currentRoundIndex && b.setBackgroundAlpha(1);
                a._gameDisplays[h][n] = b;
                p.add(b)
            });
            var h = Phaser.Rectangle.clone(Game.game.world.bounds);
            h.height -= Game.scale(300);
            h.width -= Game.scale(300);
            this._trophy = new Phaser.Sprite(Game.game, 0, 0, "ui", "trophy-small");
            this._trophy.anchor.set(0, .5);
            this._trophy.scale.set(1.3, 1.3);
            util.PositionHelper.centerVertically([this._trophy], 0, h);
            Object.keys(this._gameDisplays).forEach(function(b) {
                "0" == b ? util.PositionHelper.centerVertically(a._gameDisplays[b],
                    Game.scale(20), h) : a._gameDisplays[b].forEach(function(c, d) {
                    h = new Phaser.Rectangle(Game.dimensions.width, Game.dimensions.height, 0, 0);
                    var e = 0;
                    a._gameDisplays[parseInt(b, 10) - 1].forEach(function(a, b) {
                        if (2 * d == b || 2 * d + 1 == b) h.x = Math.min(h.x, a.x - a.width / 2), h.y = Math.min(h.y, a.y - a.height / 2), e = Math.max(e, a.y + a.height / 2)
                    });
                    h.height = e - h.y;
                    util.PositionHelper.centerVertically([a._gameDisplays[b][d]], Game.scale(20), h)
                })
            });
            d.push(this._trophy);
            util.PositionHelper.centerHorizontally(d, Game.scale(70));
            this.add(this._trophy);
            this.addMultiple(d)
        }
        __extends(a, b);
        a.prototype.doTeamLogoAnimation = function(a) {
            util.Sound.playFx("crowd-goal");
            this._trophy.scale.x *= -1;
            this._trophy.anchor.set(.5, .5);
            this._trophy.x += Game.scale(300);
            a = Game.game.add.sprite(this._trophy.x, this._trophy.y - Game.scale(800), "teams", "teamlogo-" + a["sprite-key"], Game.state.uiLayer);
            a.alpha = 0;
            a.scale.set(-2, -2);
            this.add(a);
            Game.game.add.tween(a).to({
                    x: this._trophy.x - Game.scale(100),
                    y: this._trophy.y - Game.scale(300),
                    alpha: 1
                }, 1500, Phaser.Easing.Quadratic.Out, !0,
                500);
            Game.game.add.tween(a.scale).to({
                x: 1.1,
                y: 1.1
            }, 1E3, Phaser.Easing.Quadratic.Out, !0, 1E3);
            Game.game.add.tween(this._trophy).to({
                x: this._trophy.x - Game.scale(55)
            }, 1E3, Phaser.Easing.Quadratic.Out, !0, 1E3);
            Game.game.add.tween(this._trophy.scale).to({
                x: 2,
                y: 2
            }, 1E3, Phaser.Easing.Quadratic.Out, !0, 1E3)
        };
        return a
    }(Phaser.Group);
    c.TourneyUI = d
})(ui || (ui = {}));